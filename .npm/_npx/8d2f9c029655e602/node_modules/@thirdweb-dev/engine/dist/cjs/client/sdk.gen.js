"use strict";
// This file is auto-generated by @hey-api/openapi-ts
Object.defineProperty(exports, "__esModule", { value: true });
exports.getTransactionAnalyticsSummary = exports.getTransactionAnalytics = exports.searchTransactions = exports.encodeFunctionData = exports.getNativeBalance = exports.readContract = exports.signTypedData = exports.signMessage = exports.signTransaction = exports.sendTransaction = exports.writeContract = exports.createAccount = exports.listAccounts = void 0;
const client_gen_js_1 = require("./client.gen.js");
/**
 * List Server Wallets
 * List all engine server wallets for the current project. Returns an array of EOA addresses with their corresponding predicted smart account addresses.
 */
const listAccounts = (options) => {
    return (options?.client ?? client_gen_js_1.client).get({
        security: [
            {
                name: "x-secret-key",
                type: "apiKey",
            },
        ],
        url: "/v1/accounts",
        ...options,
    });
};
exports.listAccounts = listAccounts;
/**
 * Create Server Wallet
 * Create a new engine server wallet. This is a helper route for creating a new EOA with your KMS provider, provided as a convenient alternative to creating an EOA directly with your KMS provider. Your KMS credentials are not stored, and usage of created accounts require your KMS credentials to be sent with requests.
 */
const createAccount = (options) => {
    return (options?.client ?? client_gen_js_1.client).post({
        security: [
            {
                name: "x-secret-key",
                type: "apiKey",
            },
        ],
        url: "/v1/accounts",
        ...options,
        headers: {
            "Content-Type": "application/json",
            ...options?.headers,
        },
    });
};
exports.createAccount = createAccount;
/**
 * Write Contract
 * Call a write function on a contract.
 */
const writeContract = (options) => {
    return (options?.client ?? client_gen_js_1.client).post({
        security: [
            {
                name: "x-secret-key",
                type: "apiKey",
            },
        ],
        url: "/v1/write/contract",
        ...options,
        headers: {
            "Content-Type": "application/json",
            ...options?.headers,
        },
    });
};
exports.writeContract = writeContract;
/**
 * Send Transaction
 * Send an encoded transaction or a batch of transactions
 */
const sendTransaction = (options) => {
    return (options?.client ?? client_gen_js_1.client).post({
        security: [
            {
                name: "x-secret-key",
                type: "apiKey",
            },
        ],
        url: "/v1/write/transaction",
        ...options,
        headers: {
            "Content-Type": "application/json",
            ...options?.headers,
        },
    });
};
exports.sendTransaction = sendTransaction;
/**
 * Sign Transaction
 * Sign transactions without sending them.
 */
const signTransaction = (options) => {
    return (options?.client ?? client_gen_js_1.client).post({
        security: [
            {
                name: "x-secret-key",
                type: "apiKey",
            },
        ],
        url: "/v1/sign/transaction",
        ...options,
        headers: {
            "Content-Type": "application/json",
            ...options?.headers,
        },
    });
};
exports.signTransaction = signTransaction;
/**
 * Sign Message
 * Sign arbitrary messages.
 */
const signMessage = (options) => {
    return (options?.client ?? client_gen_js_1.client).post({
        security: [
            {
                name: "x-secret-key",
                type: "apiKey",
            },
        ],
        url: "/v1/sign/message",
        ...options,
        headers: {
            "Content-Type": "application/json",
            ...options?.headers,
        },
    });
};
exports.signMessage = signMessage;
/**
 * Sign Typed Data
 * Sign EIP-712 typed data.
 */
const signTypedData = (options) => {
    return (options?.client ?? client_gen_js_1.client).post({
        security: [
            {
                name: "x-secret-key",
                type: "apiKey",
            },
        ],
        url: "/v1/sign/typed-data",
        ...options,
        headers: {
            "Content-Type": "application/json",
            ...options?.headers,
        },
    });
};
exports.signTypedData = signTypedData;
/**
 * Read Contract
 * Call read-only contract functions or batch read using multicall.
 */
const readContract = (options) => {
    return (options?.client ?? client_gen_js_1.client).post({
        security: [
            {
                name: "x-secret-key",
                type: "apiKey",
            },
        ],
        url: "/v1/read/contract",
        ...options,
        headers: {
            "Content-Type": "application/json",
            ...options?.headers,
        },
    });
};
exports.readContract = readContract;
/**
 * Read Native Balance
 * Fetches the native cryptocurrency balance (e.g., ETH, MATIC) for a given address on a specific chain.
 */
const getNativeBalance = (options) => {
    return (options?.client ?? client_gen_js_1.client).post({
        security: [
            {
                name: "x-secret-key",
                type: "apiKey",
            },
        ],
        url: "/v1/read/balance",
        ...options,
        headers: {
            "Content-Type": "application/json",
            ...options?.headers,
        },
    });
};
exports.getNativeBalance = getNativeBalance;
/**
 * Encode Function Data
 * Encode a contract call into transaction parameters (to, data, value).
 */
const encodeFunctionData = (options) => {
    return (options?.client ?? client_gen_js_1.client).post({
        security: [
            {
                name: "x-secret-key",
                type: "apiKey",
            },
        ],
        url: "/v1/encode/contract",
        ...options,
        headers: {
            "Content-Type": "application/json",
            ...options?.headers,
        },
    });
};
exports.encodeFunctionData = encodeFunctionData;
/**
 * Search Transactions
 * Advanced search for transactions with complex nested filters
 */
const searchTransactions = (options) => {
    return (options?.client ?? client_gen_js_1.client).post({
        security: [
            {
                name: "x-secret-key",
                type: "apiKey",
            },
        ],
        url: "/v1/transactions/search",
        ...options,
        headers: {
            "Content-Type": "application/json",
            ...options?.headers,
        },
    });
};
exports.searchTransactions = searchTransactions;
/**
 * Transaction Analytics
 * Get transaction count analytics over time with filtering
 */
const getTransactionAnalytics = (options) => {
    return (options?.client ?? client_gen_js_1.client).post({
        security: [
            {
                name: "x-secret-key",
                type: "apiKey",
            },
        ],
        url: "/v1/transactions/analytics",
        ...options,
        headers: {
            "Content-Type": "application/json",
            ...options?.headers,
        },
    });
};
exports.getTransactionAnalytics = getTransactionAnalytics;
/**
 * Transaction Analytics Summary
 * Get a summary (total count and total gas calculation) for transactions within a time range, supporting complex nested filters.
 */
const getTransactionAnalyticsSummary = (options) => {
    return (options?.client ?? client_gen_js_1.client).post({
        security: [
            {
                name: "x-secret-key",
                type: "apiKey",
            },
        ],
        url: "/v1/transactions/analytics-summary",
        ...options,
        headers: {
            "Content-Type": "application/json",
            ...options?.headers,
        },
    });
};
exports.getTransactionAnalyticsSummary = getTransactionAnalyticsSummary;
//# sourceMappingURL=sdk.gen.js.map