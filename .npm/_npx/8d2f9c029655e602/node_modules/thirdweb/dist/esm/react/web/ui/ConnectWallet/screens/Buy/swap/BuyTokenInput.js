import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
import { useRef } from "react";
import { fontSize } from "../../../../../../core/design-system/index.js";
import { Container } from "../../../../components/basic.js";
import { Input } from "../../../../components/formElements.js";
import { Spacer } from "../../../../components/Spacer.js";
import { TokenRow } from "../../../../components/token/TokenRow.js";
import { TokenSymbol } from "../../../../components/token/TokenSymbol.js";
import { getBuyTokenAmountFontSize } from "../utils.js";
import { FiatValue } from "./FiatValue.js";
/**
 * @internal
 */
export function BuyTokenInput(props) {
    const getWidth = () => {
        let chars = props.value.replace(".", "").length;
        const hasDot = props.value.includes(".");
        if (hasDot) {
            chars += 0.3;
        }
        return `calc(${`${Math.max(1, chars)}ch`} + 6px)`;
    };
    const inputRef = useRef(null);
    return (_jsxs(Container, { children: [_jsx("div", { onClick: () => {
                    inputRef.current?.focus();
                }, children: _jsxs(Container, { center: "both", flex: "row", gap: "xs", style: {
                        flexWrap: "nowrap",
                    }, children: [_jsx(Input, { "data-placeholder": props.value === "", disabled: props.freezeAmount, inputMode: "decimal", onChange: (e) => {
                                let value = e.target.value;
                                // Replace comma with period if it exists
                                value = value.replace(",", ".");
                                if (value.startsWith(".")) {
                                    value = `0${value}`;
                                }
                                const numValue = Number(value);
                                if (Number.isNaN(numValue)) {
                                    return;
                                }
                                if (value.startsWith("0") && !value.startsWith("0.")) {
                                    props.onChange(value.slice(1));
                                }
                                else {
                                    props.onChange(value);
                                }
                            }, onClick: (e) => {
                                // put cursor at the end of the input
                                if (props.value === "") {
                                    e.currentTarget.setSelectionRange(e.currentTarget.value.length, e.currentTarget.value.length);
                                }
                            }, pattern: "^[0-9]*[.,]?[0-9]*$", placeholder: "0", ref: inputRef, style: {
                                border: "none",
                                borderRadius: "0",
                                boxShadow: "none",
                                fontSize: getBuyTokenAmountFontSize(props.value),
                                fontWeight: 600,
                                maxWidth: "calc(100% - 100px)",
                                padding: "0",
                                paddingBlock: "2px",
                                textAlign: "right",
                                width: getWidth(),
                            }, tabIndex: -1, type: "text", value: props.value || "0", variant: "outline" }), _jsx(TokenSymbol, { chain: props.chain, color: "secondaryText", size: "lg", token: props.token })] }) }), _jsx(Container, { center: "both", flex: "row", style: {
                    height: fontSize.xl,
                }, children: _jsx(FiatValue, { chain: props.chain, client: props.client, size: "md", token: props.token, tokenAmount: props.value }) }), !props.hideTokenSelector && (_jsxs(_Fragment, { children: [_jsx(Spacer, { y: "md" }), _jsx(Container, { center: "x", flex: "row", children: _jsx(TokenRow, { chain: props.chain, client: props.client, freezeChainAndToken: props.freezeChainAndToken, onSelectToken: props.onSelectToken, token: props.token }) })] }))] }));
}
//# sourceMappingURL=BuyTokenInput.js.map