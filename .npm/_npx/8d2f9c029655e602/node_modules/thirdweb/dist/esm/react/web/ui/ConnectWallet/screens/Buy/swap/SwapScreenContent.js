import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
import { useQuery } from "@tanstack/react-query";
import { useState } from "react";
import { trackPayEvent } from "../../../../../../../analytics/track/pay.js";
import { getCachedChain } from "../../../../../../../chains/utils.js";
import { NATIVE_TOKEN_ADDRESS } from "../../../../../../../constants/addresses.js";
import { getContract } from "../../../../../../../contract/contract.js";
import { allowance } from "../../../../../../../extensions/erc20/__generated__/IERC20/read/allowance.js";
import { useWalletBalance } from "../../../../../../core/hooks/others/useWalletBalance.js";
import { useBuyWithCryptoQuote } from "../../../../../../core/hooks/pay/useBuyWithCryptoQuote.js";
import { getErrorMessage } from "../../../../../utils/errors.js";
import { Container } from "../../../../components/basic.js";
import { Button } from "../../../../components/buttons.js";
import { Drawer, DrawerOverlay, useDrawer, } from "../../../../components/Drawer.js";
import { Spacer } from "../../../../components/Spacer.js";
import { Spinner } from "../../../../components/Spinner.js";
import { Text } from "../../../../components/text.js";
import { TokenSymbol } from "../../../../components/token/TokenSymbol.js";
import { isNativeToken } from "../../nativeToken.js";
import { EstimatedTimeAndFees } from "../EstimatedTimeAndFees.js";
import { SwapFees } from "./Fees.js";
import { PayWithCryptoQuoteInfo } from "./PayWithCrypto.js";
export function SwapScreenContent(props) {
    const { setScreen, payer, client, toChain, tokenAmount, toToken, fromChain, fromToken, payOptions, disableTokenSelection, } = props;
    const defaultRecipientAddress = props.payOptions?.paymentInfo?.sellerAddress;
    const receiverAddress = defaultRecipientAddress || props.activeAccount.address;
    const { drawerRef, drawerOverlayRef, isOpen, setIsOpen } = useDrawer();
    const [drawerScreen, setDrawerScreen] = useState("fees");
    const fromTokenBalanceQuery = useWalletBalance({
        address: payer.account.address,
        chain: fromChain,
        client,
        tokenAddress: isNativeToken(fromToken) ? undefined : fromToken?.address,
    }, {
        enabled: !!fromChain && !!fromToken,
    });
    const fromTokenId = isNativeToken(fromToken)
        ? NATIVE_TOKEN_ADDRESS
        : fromToken?.address?.toLowerCase();
    const toTokenId = isNativeToken(toToken)
        ? NATIVE_TOKEN_ADDRESS
        : toToken.address.toLowerCase();
    const swapRequired = !!tokenAmount &&
        !!fromChain &&
        !!fromTokenId &&
        !(fromChain?.id === toChain.id && fromTokenId === toTokenId);
    const quoteParams = fromChain && fromToken && swapRequired
        ? {
            client,
            // wallets
            fromAddress: payer.account.address,
            // from
            fromChainId: fromChain.id,
            fromTokenAddress: isNativeToken(fromToken)
                ? NATIVE_TOKEN_ADDRESS
                : fromToken.address,
            paymentLinkId: props.paymentLinkId,
            purchaseData: payOptions.purchaseData,
            toAddress: receiverAddress,
            toAmount: tokenAmount,
            // to
            toChainId: toChain.id,
            toTokenAddress: isNativeToken(toToken)
                ? NATIVE_TOKEN_ADDRESS
                : toToken.address,
        }
        : undefined;
    const quoteQuery = useBuyWithCryptoQuote(quoteParams, {
        gcTime: 30 * 1000,
        refetchInterval: 30 * 1000,
        // refetch every 30 seconds
        staleTime: 30 * 1000,
    });
    const allowanceQuery = useQuery({
        enabled: !!quoteQuery.data?.approvalData,
        queryFn: () => {
            if (!quoteQuery.data?.approvalData) {
                return null;
            }
            return allowance({
                contract: getContract({
                    address: quoteQuery.data.swapDetails.fromToken.tokenAddress,
                    chain: getCachedChain(quoteQuery.data.swapDetails.fromToken.chainId),
                    client: props.client,
                }),
                owner: props.payer.account.address,
                spender: quoteQuery.data.approvalData.spenderAddress,
            });
        },
        queryKey: [
            "allowance",
            payer.account.address,
            quoteQuery.data?.approvalData,
        ],
        refetchOnMount: true,
    });
    const sourceTokenAmount = swapRequired
        ? quoteQuery.data?.swapDetails.fromAmount
        : tokenAmount;
    const isNotEnoughBalance = !!sourceTokenAmount &&
        !!fromTokenBalanceQuery.data &&
        Number(fromTokenBalanceQuery.data.displayValue) < Number(sourceTokenAmount);
    const disableContinue = !fromChain ||
        !fromToken ||
        (swapRequired && !quoteQuery.data) ||
        isNotEnoughBalance ||
        allowanceQuery.isLoading;
    const errorMsg = !quoteQuery.isLoading && quoteQuery.error
        ? getErrorMessage(quoteQuery.error)
        : undefined;
    function showSwapFlow() {
        if ((props.payOptions.mode === "direct_payment" ||
            props.payOptions.mode === "fund_wallet") &&
            !isNotEnoughBalance &&
            !swapRequired) {
            // same currency, just direct transfer
            setScreen({
                id: "transfer-flow",
            });
        }
        else if (props.payOptions.mode === "transaction" &&
            !isNotEnoughBalance &&
            !swapRequired) {
            if (payer.account.address !== receiverAddress) {
                // needs transfer from another wallet before executing the transaction
                setScreen({
                    id: "transfer-flow",
                });
            }
            else {
                // has enough balance to just do the transaction directly
                props.onDone();
            }
            return;
        }
        if (!quoteQuery.data) {
            return;
        }
        setScreen({
            approvalAmount: allowanceQuery.data ?? undefined,
            id: "swap-flow",
            quote: quoteQuery.data,
        });
    }
    function showFees() {
        if (!quoteQuery.data) {
            return;
        }
        setIsOpen(true);
        setDrawerScreen("fees");
    }
    return (_jsxs(Container, { animate: "fadein", flex: "column", gap: "lg", children: [isOpen && (_jsxs(_Fragment, { children: [_jsx(DrawerOverlay, { ref: drawerOverlayRef }), _jsx(Drawer, { close: () => setIsOpen(false), ref: drawerRef, children: drawerScreen === "fees" && quoteQuery.data && (_jsxs("div", { children: [_jsx(Text, { color: "primaryText", size: "lg", children: "Fees" }), _jsx(Spacer, { y: "lg" }), _jsx(SwapFees, { quote: quoteQuery.data })] })) })] })), _jsxs(Container, { flex: "column", gap: "sm", children: [_jsxs(Container, { center: "y", flex: "row", gap: "xxs", children: [_jsx(Text, { size: "sm", children: "Pay with" }), fromToken && fromChain ? (_jsx(TokenSymbol, { chain: fromChain, color: "secondaryText", size: "sm", token: fromToken })) : ("crypto")] }), _jsxs("div", { children: [_jsx(PayWithCryptoQuoteInfo, { chain: fromChain, client: client, freezeChainAndTokenSelection: disableTokenSelection, isLoading: quoteQuery.isLoading && !sourceTokenAmount, onSelectToken: props.showFromTokenSelector, payerAccount: props.payer.account, swapRequired: swapRequired, token: fromToken, value: sourceTokenAmount || "" }), swapRequired && fromChain && fromToken && (_jsx(EstimatedTimeAndFees, { estimatedSeconds: quoteQuery.data?.swapDetails.estimated.durationSeconds, onViewFees: showFees, quoteIsLoading: quoteQuery.isLoading }))] }), errorMsg && (_jsx("div", { children: _jsxs("div", { children: [_jsx(Text, { center: true, color: "danger", multiline: true, size: "xs", children: errorMsg.title }), _jsx(Text, { center: true, multiline: true, size: "xs", children: errorMsg.message })] }) })), !errorMsg && isNotEnoughBalance && (_jsxs("div", { children: [_jsx(Text, { center: true, color: "danger", multiline: true, size: "xs", children: "Insufficient Funds" }), _jsx(Text, { center: true, multiline: true, size: "xs", children: "Select another token or pay with card." })] }))] }), isNotEnoughBalance || errorMsg ? (_jsx(Button, { fullWidth: true, onClick: () => props.showFromTokenSelector(), variant: "accent", children: "Pay with another token" })) : (_jsx(Button, { "data-disabled": disableContinue, disabled: disableContinue, fullWidth: true, gap: "xs", onClick: async () => {
                    if (!disableContinue) {
                        if (props.payer.wallet.getChain()?.id !== fromChain?.id) {
                            await props.payer.wallet.switchChain(fromChain);
                        }
                        showSwapFlow();
                        trackPayEvent({
                            chainId: fromChain.id,
                            client: client,
                            event: "confirm_swap_quote",
                            fromToken: isNativeToken(fromToken)
                                ? undefined
                                : fromToken.address,
                            toChainId: toChain.id,
                            toToken: isNativeToken(toToken) ? undefined : toToken.address,
                            walletAddress: payer.account.address,
                            walletType: payer.wallet.id,
                        });
                    }
                }, variant: disableContinue ? "outline" : "accent", children: quoteQuery.isLoading ? (_jsxs(_Fragment, { children: ["Getting price quote", _jsx(Spinner, { size: "sm" })] })) : ("Continue") }))] }));
}
//# sourceMappingURL=SwapScreenContent.js.map