import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
import { useQueryClient } from "@tanstack/react-query";
import { useCallback, useMemo, useState } from "react";
import { trackPayEvent } from "../../../../../../analytics/track/pay.js";
import { getCachedChain } from "../../../../../../chains/utils.js";
import { NATIVE_TOKEN_ADDRESS, ZERO_ADDRESS, } from "../../../../../../constants/addresses.js";
import { formatNumber } from "../../../../../../utils/formatNumber.js";
import { fontSize, spacing, } from "../../../../../core/design-system/index.js";
import { useActiveAccount } from "../../../../../core/hooks/wallets/useActiveAccount.js";
import { invalidateWalletBalance } from "../../../../../core/providers/invalidateWalletBalance.js";
import { ErrorState } from "../../../../wallets/shared/ErrorState.js";
import { LoadingScreen } from "../../../../wallets/shared/LoadingScreen.js";
import { Container, Line, ModalHeader } from "../../../components/basic.js";
import { Button } from "../../../components/buttons.js";
import { ChainName } from "../../../components/ChainName.js";
import { Input } from "../../../components/formElements.js";
import { Spacer } from "../../../components/Spacer.js";
import { TokenSymbol } from "../../../components/token/TokenSymbol.js";
import { ConnectButton } from "../../ConnectButton.js";
import { ChainButton, NetworkSelectorContent } from "../../NetworkSelector.js";
import { PoweredByThirdweb } from "../../PoweredByTW.js";
import { isNativeToken } from "../nativeToken.js";
import { TokenSelector } from "../TokenSelector.js";
import { WalletSwitcherConnectionScreen } from "../WalletSwitcherConnectionScreen.js";
import { DirectPaymentModeScreen } from "./DirectPaymentModeScreen.js";
import { CurrencySelection } from "./fiat/CurrencySelection.js";
import { FiatScreenContent } from "./fiat/FiatScreenContent.js";
import { OnRampScreen } from "./fiat/OnRampScreen.js";
import { useEnabledPaymentMethods, } from "./main/useEnabledPaymentMethods.js";
import { useFiatCurrencySelectionStates, useFromTokenSelectionStates, useToTokenSelectionStates, } from "./main/useUISelectionStates.js";
import { PayTokenIcon } from "./PayTokenIcon.js";
import { BuyTokenInput } from "./swap/BuyTokenInput.js";
import { FiatValue } from "./swap/FiatValue.js";
import { useWalletsAndBalances } from "./swap/fetchBalancesForWallet.js";
import { SwapFlow } from "./swap/SwapFlow.js";
import { SwapScreenContent } from "./swap/SwapScreenContent.js";
import { TokenSelectorScreen } from "./swap/TokenSelectorScreen.js";
import { TransferFlow } from "./swap/TransferFlow.js";
import { useBuySupportedDestinations, useBuySupportedSources, } from "./swap/useSwapSupportedChains.js";
import { TransactionModeScreen } from "./TransactionModeScreen.js";
import { usePayerSetup } from "./usePayerSetup.js";
/**
 * @internal
 */
export default function BuyScreen(props) {
    const isTestMode = props.payOptions.buyWithCrypto
        ? props.payOptions.buyWithCrypto.testMode
        : undefined;
    const supportedDestinationsQuery = useBuySupportedDestinations(props.client, isTestMode);
    if (supportedDestinationsQuery.isError) {
        return (_jsx(Container, { center: "both", flex: "row", fullHeight: true, style: {
                minHeight: "350px",
            }, children: _jsx(ErrorState, { onTryAgain: supportedDestinationsQuery.refetch, title: "Something went wrong" }) }));
    }
    if (!supportedDestinationsQuery.data) {
        return _jsx(LoadingScreen, {});
    }
    const supportedDestinations = props.supportedTokens
        ? Object.entries(props.supportedTokens).map(([chainId, tokens]) => ({
            chain: getCachedChain(Number.parseInt(chainId)),
            tokens: tokens.map((t) => ({
                ...t,
                buyWithCryptoEnabled: true,
                buyWithFiatEnabled: true,
            })),
        }))
        : supportedDestinationsQuery.data;
    return (_jsx(BuyScreenContent, { ...props, supportedDestinations: supportedDestinations }));
}
/**
 * @internal
 */
function BuyScreenContent(props) {
    const { client, supportedDestinations, connectLocale, payOptions } = props;
    const activeAccount = useActiveAccount();
    const { payer, setPayer } = usePayerSetup();
    const [screen, setScreen] = useState({
        id: "main",
    });
    const { tokenAmount, setTokenAmount, toChain, setToChain, deferredTokenAmount, toToken, setToToken, } = useToTokenSelectionStates({
        payOptions,
        supportedDestinations,
    });
    const [hasEditedAmount, setHasEditedAmount] = useState(false);
    const onDone = useCallback(() => {
        setScreen({ id: "main" });
        props.onDone();
    }, [props.onDone]);
    // check if the screen is expanded or not
    // update supportedSources whenever toToken or toChain is updated
    const supportedSourcesQuery = useBuySupportedSources({
        client: props.client,
        destinationChainId: toChain.id,
        destinationTokenAddress: isNativeToken(toToken)
            ? NATIVE_TOKEN_ADDRESS
            : toToken.address,
    });
    const destinationSupportedTokens = useMemo(() => {
        return createSupportedTokens(supportedDestinations, payOptions, props.supportedTokens);
    }, [props.supportedTokens, supportedDestinations, payOptions]);
    const sourceSupportedTokens = useMemo(() => {
        if (!supportedSourcesQuery.data) {
            return undefined;
        }
        const supportedSources = supportedSourcesQuery.data;
        return createSupportedTokens(supportedSources, payOptions, props.supportedTokens);
    }, [props.supportedTokens, supportedSourcesQuery.data, payOptions]);
    // preload wallets and balances
    useWalletsAndBalances({
        client: props.client,
        mode: payOptions.mode,
        sourceSupportedTokens: sourceSupportedTokens || [],
        toChain: toChain,
        toToken: toToken,
    });
    const { fromChain, setFromChain, fromToken, setFromToken } = useFromTokenSelectionStates({
        payOptions,
        supportedSources: supportedSourcesQuery.data || [],
    });
    const { selectedCurrency, setSelectedCurrency } = useFiatCurrencySelectionStates({
        payOptions,
    });
    const enabledPaymentMethods = useEnabledPaymentMethods({
        payOptions: props.payOptions,
        supportedDestinations: props.supportedDestinations,
        toChain: toChain,
        toToken: toToken,
    });
    const payDisabled = enabledPaymentMethods.buyWithCryptoEnabled === false &&
        enabledPaymentMethods.buyWithFiatEnabled === false;
    // screens ----------------------------
    const queryClient = useQueryClient();
    const onSwapSuccess = useCallback((_status) => {
        props.payOptions.onPurchaseSuccess?.({
            status: _status,
            type: "crypto",
        });
        invalidateWalletBalance(queryClient);
    }, [props.payOptions.onPurchaseSuccess, queryClient]);
    const onFiatSuccess = useCallback((_status) => {
        props.payOptions.onPurchaseSuccess?.({
            status: _status,
            type: "fiat",
        });
        invalidateWalletBalance(queryClient);
    }, [props.payOptions.onPurchaseSuccess, queryClient]);
    if (screen.id === "connect-payer-wallet") {
        return (_jsx(WalletSwitcherConnectionScreen, { accountAbstraction: props.connectOptions?.accountAbstraction, appMetadata: props.connectOptions?.appMetadata, chain: toChain || props.connectOptions?.chain, chains: [toChain, ...(props.connectOptions?.chains || [])], client: props.client, connectLocale: props.connectLocale, hiddenWallets: props.hiddenWallets, isEmbed: props.isEmbed, onBack: () => setScreen(screen.backScreen), onSelect: (w) => {
                const account = w.getAccount();
                const chain = w.getChain();
                if (w && account && chain) {
                    setPayer({
                        account,
                        chain,
                        wallet: w,
                    });
                }
            }, recommendedWallets: props.connectOptions?.recommendedWallets, showAllWallets: props.connectOptions?.showAllWallets === undefined
                ? true
                : props.connectOptions?.showAllWallets, walletConnect: props.connectOptions?.walletConnect, wallets: props.connectOptions?.wallets?.filter((w) => w.id !== "inApp") }));
    }
    if (screen.id === "swap-flow" && payer) {
        return (_jsx(SwapFlow, { approvalAmount: screen.approvalAmount, buyWithCryptoQuote: screen.quote, client: client, isEmbed: props.isEmbed, isFiatFlow: false, onBack: () => {
                setScreen({
                    id: "buy-with-crypto",
                });
            }, onDone: onDone, onSuccess: onSwapSuccess, onTryAgain: () => {
                setScreen({
                    id: "buy-with-crypto",
                });
            }, payer: payer, title: props.title, transactionMode: payOptions.mode === "transaction" }));
    }
    if (screen.id === "fiat-flow" && payer) {
        const defaultRecipientAddress = props.payOptions?.paymentInfo?.sellerAddress;
        const receiverAddress = defaultRecipientAddress || payer.account.address;
        return (_jsx(OnRampScreen, { client: client, isEmbed: props.isEmbed, onBack: () => {
                setScreen({
                    id: "buy-with-fiat",
                });
            }, onDone: onDone, onSuccess: onFiatSuccess, payer: payer, paymentLinkId: props.paymentLinkId, quote: screen.quote, receiverAddress: receiverAddress, testMode: props.payOptions.buyWithFiat !== false &&
                props.payOptions.buyWithFiat?.testMode === true, theme: typeof props.theme === "string" ? props.theme : props.theme.type, title: props.title, transactionMode: payOptions.mode === "transaction" }));
    }
    if (screen.id === "transfer-flow" && payer && activeAccount) {
        const goBack = () => setScreen({ id: "buy-with-crypto" });
        // TODO (pay) pass it via screen props
        const defaultRecipientAddress = props.payOptions?.paymentInfo?.sellerAddress;
        const receiverAddress = defaultRecipientAddress || activeAccount.address;
        return (_jsx(TransferFlow, { chain: toChain, client: props.client, isEmbed: props.isEmbed, onBack: goBack, onDone: onDone, onSuccess: onSwapSuccess, onTryAgain: () => {
                setScreen({
                    id: "buy-with-crypto",
                });
            }, payer: payer, paymentLinkId: props.paymentLinkId, payOptions: payOptions, receiverAddress: receiverAddress, title: props.title, token: toToken, tokenAmount: tokenAmount, transactionMode: props.payOptions.mode === "transaction" }));
    }
    if (screen.id === "select-currency") {
        const goBack = () => setScreen(screen.backScreen);
        return (_jsx(CurrencySelection, { onBack: goBack, onSelect: (currency) => {
                goBack();
                setSelectedCurrency(currency);
            } }));
    }
    if (screen.id === "select-to-token") {
        const chains = supportedDestinations.map((x) => x.chain);
        const goBack = () => setScreen(screen.backScreen);
        const allowEdits = payOptions?.prefillBuy
            ?.allowEdits;
        // if token selection is disabled - only show network selector screen
        if (allowEdits?.token === false) {
            return (_jsx(ChainSelectionScreen, { chains: chains, client: props.client, connectLocale: props.connectLocale, goBack: goBack, setChain: setToChain }));
        }
        return (_jsx(TokenSelector, { chain: toChain, chainSelection: 
            // hide chain selection if it's disabled
            allowEdits?.chain !== false
                ? {
                    chains: chains,
                    select: (c) => {
                        setToChain(c);
                    },
                }
                : undefined, client: client, connectLocale: connectLocale, modalTitle: props.title, onBack: goBack, onTokenSelect: (tokenInfo) => {
                setToToken(tokenInfo);
                goBack();
            }, tokenList: ((toChain?.id ? destinationSupportedTokens[toChain.id] : undefined) ||
                []).filter((x) => x.address.toLowerCase() !== NATIVE_TOKEN_ADDRESS.toLowerCase()) }));
    }
    return (_jsx(Container, { animate: "fadein", children: _jsxs("div", { children: [screen.id === "main" && (_jsx(MainScreen, { client: client, connectOptions: props.connectOptions, enabledPaymentMethods: enabledPaymentMethods, hasEditedAmount: hasEditedAmount, onBack: props.onBack, onSelectBuyToken: () => setScreen({ backScreen: screen, id: "select-to-token" }), payerAccount: payer?.account, payOptions: payOptions, setFromChain: setFromChain, setFromToken: setFromToken, setHasEditedAmount: setHasEditedAmount, setScreen: setScreen, setToChain: setToChain, setTokenAmount: setTokenAmount, setToToken: setToToken, supportedDestinations: supportedDestinations, theme: props.theme, title: props.title, toChain: toChain, tokenAmount: tokenAmount, toToken: toToken })), (screen.id === "select-payment-method" ||
                    screen.id === "buy-with-crypto" ||
                    screen.id === "buy-with-fiat" ||
                    screen.id === "select-from-token") &&
                    payer && (_jsxs(TokenSelectedLayout, { client: client, disabled: ("prefillBuy" in payOptions &&
                        payOptions.prefillBuy?.allowEdits?.amount === false) ||
                        payOptions.mode !== "fund_wallet", onBack: () => {
                        if ((screen.id === "buy-with-crypto" ||
                            screen.id === "buy-with-fiat") &&
                            enabledPaymentMethods.buyWithCryptoEnabled) {
                            setScreen({
                                backScreen: { id: "main" },
                                id: "select-from-token",
                            });
                        }
                        else if (screen.id === "select-from-token") {
                            setScreen(screen.backScreen);
                        }
                        else {
                            setScreen({ id: "main" });
                        }
                    }, selectedChain: toChain, selectedToken: toToken, setTokenAmount: setTokenAmount, title: props.title, tokenAmount: tokenAmount, children: [screen.id === "buy-with-crypto" && activeAccount && (_jsx(SwapScreenContent, { activeAccount: activeAccount, client: client, connectLocale: connectLocale, connectOptions: props.connectOptions, disableTokenSelection: payDisabled === true ||
                                (payOptions.buyWithCrypto !== false &&
                                    payOptions.buyWithCrypto?.prefillSource?.allowEdits
                                        ?.chain === false &&
                                    payOptions.buyWithCrypto?.prefillSource?.allowEdits
                                        ?.token === false), fromChain: fromChain, fromToken: fromToken, isEmbed: props.isEmbed, onDone: onDone, payer: payer, paymentLinkId: props.paymentLinkId, payOptions: payOptions, setHasEditedAmount: setHasEditedAmount, setPayer: setPayer, setScreen: setScreen, setTokenAmount: setTokenAmount, 
                            // pass it even though we are passing payer, because payer might be different
                            showFromTokenSelector: () => {
                                setScreen({
                                    backScreen: screen,
                                    id: "select-from-token",
                                });
                            }, toChain: toChain, tokenAmount: deferredTokenAmount, toToken: toToken })), screen.id === "buy-with-fiat" && (_jsx(FiatScreenContent, { client: client, isEmbed: props.isEmbed, onDone: onDone, payer: payer, paymentLinkId: props.paymentLinkId, payOptions: payOptions, selectedCurrency: selectedCurrency, setHasEditedAmount: setHasEditedAmount, setScreen: setScreen, setTokenAmount: setTokenAmount, showCurrencySelector: () => {
                                setScreen({
                                    backScreen: screen,
                                    id: "select-currency",
                                });
                            }, theme: props.theme, toChain: toChain, tokenAmount: deferredTokenAmount, toToken: toToken })), screen.id === "select-from-token" &&
                            supportedSourcesQuery.data &&
                            sourceSupportedTokens && (_jsx(TokenSelectorScreen, { client: props.client, fiatSupported: props.payOptions.buyWithFiat !== false, hiddenWallets: props.hiddenWallets, mode: payOptions.mode, onConnect: () => {
                                setScreen({
                                    backScreen: screen,
                                    id: "connect-payer-wallet",
                                });
                            }, onPayWithFiat: () => {
                                setScreen({
                                    id: "buy-with-fiat",
                                });
                            }, onSelectToken: (w, token, chain) => {
                                const account = w.getAccount();
                                if (account) {
                                    setPayer({
                                        account,
                                        chain,
                                        wallet: w,
                                    });
                                    setFromToken(token);
                                    setFromChain(chain);
                                }
                                setScreen({ id: "buy-with-crypto" });
                            }, sourceSupportedTokens: sourceSupportedTokens, sourceTokens: sourceSupportedTokens, toChain: toChain, tokenAmount: tokenAmount, toToken: toToken }))] }))] }) }));
}
function SelectedTokenInfo(props) {
    const getWidth = () => {
        const amount = formatNumber(Number(props.tokenAmount), 6).toString();
        let chars = amount.replace(".", "").length;
        const hasDot = amount.includes(".");
        if (hasDot) {
            chars += 0.3;
        }
        return `calc(${`${Math.max(1, chars)}ch + 2px`})`;
    };
    return (_jsx("div", { children: _jsxs(Container, { center: "y", flex: "row", gap: "sm", style: {
                justifyContent: "space-between",
            }, children: [_jsxs(Container, { center: "y", flex: "row", gap: "xxs", children: [_jsx(Input, { "data-placeholder": props.tokenAmount === "", disabled: props.disabled, inputMode: "decimal", onChange: (e) => {
                                let value = e.target.value;
                                // Replace comma with period if it exists
                                value = value.replace(",", ".");
                                if (value.startsWith(".")) {
                                    value = `0${value}`;
                                }
                                if (value.length > 10) {
                                    return;
                                }
                                const numValue = Number(value);
                                if (Number.isNaN(numValue)) {
                                    return;
                                }
                                if (value.startsWith("0") && !value.startsWith("0.")) {
                                    props.setTokenAmount(value.slice(1));
                                }
                                else {
                                    props.setTokenAmount(value);
                                }
                            }, onClick: (e) => {
                                // put cursor at the end of the input
                                if (props.tokenAmount === "") {
                                    e.currentTarget.setSelectionRange(e.currentTarget.value.length, e.currentTarget.value.length);
                                }
                            }, pattern: "^[0-9]*[.,]?[0-9]*$", placeholder: "0", style: {
                                border: "none",
                                borderRadius: "0",
                                boxShadow: "none",
                                fontSize: fontSize.lg,
                                fontWeight: 600,
                                padding: "0",
                                paddingBlock: "2px",
                                textAlign: "left",
                                width: getWidth(),
                            }, tabIndex: -1, type: "text", value: props.tokenAmount || "0", variant: "outline" }), _jsxs(Container, { center: "y", flex: "row", gap: "xxs", children: [_jsx(TokenSymbol, { chain: props.selectedChain, color: "secondaryText", size: "md", token: props.selectedToken }), _jsx(PayTokenIcon, { chain: props.selectedChain, client: props.client, size: "sm", token: props.selectedToken })] }), _jsx(FiatValue, { chain: props.selectedChain, client: props.client, size: "sm", token: props.selectedToken, tokenAmount: props.tokenAmount })] }), _jsx(ChainName, { chain: props.selectedChain, client: props.client, short: true, size: "sm" })] }) }));
}
function MainScreen(props) {
    const { setTokenAmount, setToChain, setToToken, setFromChain, setFromToken, payerAccount, client, tokenAmount, payOptions, toToken, toChain, supportedDestinations, enabledPaymentMethods, } = props;
    const { buyWithCryptoEnabled, buyWithFiatEnabled } = enabledPaymentMethods;
    const disableContinue = !tokenAmount;
    switch (payOptions.mode) {
        case "transaction": {
            return (_jsx(TransactionModeScreen, { client: client, connectOptions: props.connectOptions, onContinue: (tokenAmount, toChain, toToken) => {
                    setTokenAmount(tokenAmount);
                    setToChain(toChain);
                    setFromChain(toChain);
                    setFromToken(toToken);
                    setToToken(toToken);
                    if (buyWithFiatEnabled && !buyWithCryptoEnabled) {
                        props.setScreen({ id: "buy-with-fiat" });
                    }
                    else {
                        props.setScreen({
                            backScreen: { id: "main" },
                            id: "select-from-token",
                        });
                    }
                }, payerAccount: payerAccount, payUiOptions: payOptions, supportedDestinations: supportedDestinations }));
        }
        case "direct_payment": {
            return (_jsx(DirectPaymentModeScreen, { client: client, connectOptions: props.connectOptions, onContinue: (tokenAmount, toChain, toToken) => {
                    setTokenAmount(tokenAmount);
                    setToChain(toChain);
                    setFromChain(toChain);
                    setFromToken(toToken);
                    setToToken(toToken);
                    if (buyWithFiatEnabled && !buyWithCryptoEnabled) {
                        props.setScreen({ id: "buy-with-fiat" });
                    }
                    else {
                        props.setScreen({
                            backScreen: { id: "main" },
                            id: "select-from-token",
                        });
                    }
                }, payerAccount: payerAccount, payUiOptions: payOptions, supportedDestinations: supportedDestinations }));
        }
        default: {
            return (_jsxs(Container, { px: "lg", children: [_jsx(Spacer, { y: "lg" }), _jsx(ModalHeader, { onBack: props.onBack, title: props.title }), _jsx(Spacer, { y: "xl" }), _jsx(BuyTokenInput, { chain: toChain, client: props.client, freezeAmount: payOptions.prefillBuy?.allowEdits?.amount === false, freezeChainAndToken: (payOptions.prefillBuy?.allowEdits?.chain === false &&
                            payOptions.prefillBuy?.allowEdits?.token === false) ||
                            (payOptions.buyWithCrypto !== false &&
                                payOptions.buyWithCrypto?.prefillSource?.allowEdits?.token ===
                                    false &&
                                payOptions.buyWithCrypto?.prefillSource?.allowEdits?.chain ===
                                    false), onChange: async (value) => {
                            props.setHasEditedAmount(true);
                            setTokenAmount(value);
                        }, onSelectToken: props.onSelectBuyToken, token: toToken, value: tokenAmount }), _jsx(Spacer, { y: "md" }), _jsx(Container, { flex: "column", gap: "sm", children: !payerAccount ? (_jsx("div", { children: _jsx(ConnectButton, { ...props.connectOptions, client: props.client, connectButton: {
                                    style: {
                                        width: "100%",
                                    },
                                }, theme: props.theme }) })) : (_jsx(Button, { "data-disabled": disableContinue, disabled: disableContinue, fullWidth: true, onClick: () => {
                                if (buyWithFiatEnabled && !buyWithCryptoEnabled) {
                                    props.setScreen({ id: "buy-with-fiat" });
                                }
                                else {
                                    props.setScreen({
                                        backScreen: { id: "main" },
                                        id: "select-from-token",
                                    });
                                }
                                trackPayEvent({
                                    client,
                                    event: "choose_payment_method_fund_wallet_mode",
                                    toChainId: toChain.id,
                                    toToken: isNativeToken(toToken)
                                        ? undefined
                                        : toToken.address,
                                    walletAddress: payerAccount.address,
                                });
                            }, variant: "accent", children: "Continue" })) }), _jsx(Spacer, { y: "lg" }), payOptions.showThirdwebBranding !== false && (_jsxs(_Fragment, { children: [_jsx(PoweredByThirdweb, { link: "https://playground.thirdweb.com/connect/pay?utm_source=ub_text" }), _jsx(Spacer, { y: "sm" })] }))] }));
        }
    }
}
function TokenSelectedLayout(props) {
    return (_jsxs(Container, { children: [_jsx(Container, { p: "lg", children: _jsx(ModalHeader, { onBack: props.onBack, title: props.title }) }), _jsxs(Container, { px: "lg", style: {
                    paddingBottom: spacing.lg,
                }, children: [_jsx(Spacer, { y: "xs" }), _jsx(SelectedTokenInfo, { client: props.client, disabled: props.disabled, selectedChain: props.selectedChain, selectedToken: props.selectedToken, setTokenAmount: props.setTokenAmount, tokenAmount: props.tokenAmount }), _jsx(Spacer, { y: "sm" }), _jsx(Line, {}), _jsx(Spacer, { y: "sm" }), props.children] })] }));
}
function createSupportedTokens(data, payOptions, supportedTokensOverrides) {
    // dev override
    if (supportedTokensOverrides) {
        return supportedTokensOverrides;
    }
    const tokens = {};
    const isBuyWithFiatDisabled = payOptions.buyWithFiat === false;
    const isBuyWithCryptoDisabled = payOptions.buyWithCrypto === false;
    for (const x of data) {
        tokens[x.chain.id] = x.tokens.filter((t) => {
            if (t.address === ZERO_ADDRESS) {
                return false;
            }
            // for source tokens, data is not provided, so we include all of them
            if (t.buyWithCryptoEnabled === undefined &&
                t.buyWithFiatEnabled === undefined) {
                return true;
            }
            // it token supports both - include it
            if (t.buyWithCryptoEnabled && t.buyWithFiatEnabled) {
                return true;
            }
            // if buyWithFiat is disabled, and buyWithCrypto is not supported by token - exclude the token
            if (!t.buyWithCryptoEnabled && isBuyWithFiatDisabled) {
                return false;
            }
            // if buyWithCrypto is disabled, and buyWithFiat is not supported by token - exclude the token
            if (!t.buyWithFiatEnabled && isBuyWithCryptoDisabled) {
                return false;
            }
            return true; // include the token
        });
    }
    return tokens;
}
function ChainSelectionScreen(props) {
    return (_jsx(NetworkSelectorContent, { chains: props.chains, client: props.client, closeModal: props.goBack, connectLocale: props.connectLocale, networkSelector: {
            renderChain(renderChainProps) {
                return (_jsx(ChainButton, { chain: renderChainProps.chain, client: props.client, confirming: false, connectLocale: props.connectLocale, onClick: () => {
                        props.setChain(renderChainProps.chain);
                        props.goBack();
                    }, switchingFailed: false }));
            },
        }, onBack: props.goBack, showTabs: false }));
}
//# sourceMappingURL=BuyScreen.js.map