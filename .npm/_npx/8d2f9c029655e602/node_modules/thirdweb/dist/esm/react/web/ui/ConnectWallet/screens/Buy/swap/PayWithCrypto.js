import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { useCustomTheme } from "../../../../../../core/design-system/CustomThemeProvider.js";
import { fontSize, radius, spacing, } from "../../../../../../core/design-system/index.js";
import { useWalletBalance } from "../../../../../../core/hooks/others/useWalletBalance.js";
import { Container } from "../../../../components/basic.js";
import { Skeleton } from "../../../../components/Skeleton.js";
import { Text } from "../../../../components/text.js";
import { TokenRow } from "../../../../components/token/TokenRow.js";
import { TokenSymbol } from "../../../../components/token/TokenSymbol.js";
import { formatTokenBalance } from "../../formatTokenBalance.js";
import { isNativeToken } from "../../nativeToken.js";
import { WalletRow } from "./WalletRow.js";
/**
 * Shows an amount "value" and renders the selected token and chain
 * It also renders the buttons to select the token and chain
 * It also renders the balance of active wallet for the selected token in selected chain
 * @internal
 */
export function PayWithCryptoQuoteInfo(props) {
    const theme = useCustomTheme();
    const balanceQuery = useWalletBalance({
        address: props.payerAccount.address,
        chain: props.chain,
        client: props.client,
        tokenAddress: isNativeToken(props.token)
            ? undefined
            : props.token?.address,
    }, {
        enabled: !!props.chain && !!props.token,
    });
    return (_jsxs(Container, { bg: "tertiaryBg", style: {
            border: `1px solid ${theme.colors.borderColor}`,
            borderRadius: radius.lg,
            ...(props.swapRequired
                ? {
                    borderBottom: "none",
                    borderBottomLeftRadius: 0,
                    borderBottomRightRadius: 0,
                }
                : {}),
        }, children: [_jsxs(Container, { flex: "row", gap: "sm", style: {
                    borderBottom: `1px solid ${theme.colors.borderColor}`,
                    justifyContent: "space-between",
                    padding: spacing.sm,
                }, children: [_jsx(WalletRow, { address: props.payerAccount.address, client: props.client }), props.token && props.chain && balanceQuery.data ? (_jsxs(Container, { center: "y", flex: "row", gap: "3xs", children: [_jsx(Text, { color: "secondaryText", size: "xs", weight: 500, children: formatTokenBalance(balanceQuery.data, false, 4) }), _jsx(TokenSymbol, { chain: props.chain, color: "secondaryText", size: "xs", token: props.token })] })) : props.token && props.chain && balanceQuery.isLoading ? (_jsx(Skeleton, { height: fontSize.xs, width: "70px" })) : null] }), _jsx(TokenRow, { chain: props.chain, client: props.client, isLoading: props.isLoading, onSelectToken: props.onSelectToken, style: {
                    border: "none",
                    borderBottomLeftRadius: !props.token || !props.chain || !props.swapRequired ? radius.lg : 0,
                    borderBottomRightRadius: !props.token || !props.chain || !props.swapRequired ? radius.lg : 0,
                    borderRadius: 0,
                }, token: props.token, value: props.value })] }));
}
//# sourceMappingURL=PayWithCrypto.js.map