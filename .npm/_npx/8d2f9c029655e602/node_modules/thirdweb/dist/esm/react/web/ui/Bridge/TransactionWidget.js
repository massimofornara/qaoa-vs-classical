"use client";
import { jsx as _jsx } from "react/jsx-runtime";
import { useQuery } from "@tanstack/react-query";
import { NATIVE_TOKEN_ADDRESS } from "../../../../constants/addresses.js";
import { getToken } from "../../../../pay/convert/get-token.js";
import { prepareTransaction, } from "../../../../transaction/prepare-transaction.js";
import { checksumAddress } from "../../../../utils/address.js";
import { stringify } from "../../../../utils/json.js";
import { toUnits } from "../../../../utils/units.js";
import { CustomThemeProvider } from "../../../core/design-system/CustomThemeProvider.js";
import { useConnectLocale } from "../ConnectWallet/locale/getConnectLocale.js";
import { EmbedContainer } from "../ConnectWallet/Modal/ConnectEmbed.js";
import { DynamicHeight } from "../components/DynamicHeight.js";
import { Spinner } from "../components/Spinner.js";
import { BridgeOrchestrator } from "./BridgeOrchestrator.js";
import { UnsupportedTokenScreen } from "./UnsupportedTokenScreen.js";
/**
 * Widget a prebuilt UI for purchasing a specific token.
 *
 * @param props - Props of type [`TransactionWidgetProps`](https://portal.thirdweb.com/references/typescript/v5/TransactionWidgetProps) to configure the TransactionWidget component.
 *
 * @example
 * ### Default configuration
 *
 * By default, the `TransactionWidget` component will allows users to fund their wallets with crypto or fiat on any of the supported chains..
 *
 * ```tsx
 * <TransactionWidget
 *   client={client}
 *   transaction={prepareTransaction({
 *     to: "0x...",
 *     chain: ethereum,
 *     client: client,
 *   })}
 *   amount="0.1"
 *  />
 * ```
 *
 * ### Customize the UI
 *
 * You can customize the UI of the `TransactionWidget` component by passing a custom theme object to the `theme` prop.
 *
 * ```tsx
 * <TransactionWidget
 *   client={client}
 *   transaction={prepareTransaction({
 *     to: "0x...",
 *     chain: ethereum,
 *     client: client,
 *     value: toUnits("0.001", 18),
 *   })}
 *   theme={darkTheme({
 *     colors: {
 *       modalBg: "red",
 *     },
 *   })}
 * />
 * ```
 *
 * Refer to the [`Theme`](https://portal.thirdweb.com/references/typescript/v5/Theme) type for more details.
 *
 * ### Update the Title
 *
 * You can update the title of the widget by passing a `title` prop to the `TransactionWidget` component.
 *
 * ```tsx
 * <TransactionWidget
 *   transaction={prepareTransaction({
 *     to: "0x...",
 *     chain: ethereum,
 *     client: client,
 *     value: toUnits("0.001", 18),
 *   })}
 *   client={client}
 *   title="Transaction ETH"
 * />
 * ```
 *
 * ### Configure the wallet connection
 *
 * You can customize the wallet connection flow by passing a `connectOptions` object to the `TransactionWidget` component.
 *
 * ```tsx
 * <TransactionWidget
 *   client={client}
 *   transaction={prepareTransaction({
 *     to: "0x...",
 *     chain: ethereum,
 *     client: client,
 *     value: toUnits("0.001", 18),
 *   })}
 *   connectOptions={{
 *     connectModal: {
 *       size: 'compact',
 *       title: "Sign in",
 *     }
 *   }}
 * />
 * ```
 *
 * Refer to the [`TransactionWidgetConnectOptions`](https://portal.thirdweb.com/references/typescript/v5/TransactionWidgetConnectOptions) type for more details.
 *
 * @bridge
 * @beta
 * @react
 */
export function TransactionWidget(props) {
    const localeQuery = useConnectLocale(props.locale || "en_US");
    const theme = props.theme || "dark";
    const bridgeDataQuery = useQuery({
        queryFn: async () => {
            let erc20Value = props.transaction.erc20Value;
            if (props.amount) {
                // Get token decimals for conversion
                const tokenAddress = props.tokenAddress || NATIVE_TOKEN_ADDRESS;
                const token = await getToken(props.client, checksumAddress(tokenAddress), props.transaction.chain.id);
                erc20Value = {
                    amountWei: toUnits(props.amount, token.decimals),
                    tokenAddress: checksumAddress(tokenAddress),
                };
            }
            const transaction = prepareTransaction({
                ...props.transaction,
                erc20Value,
            });
            return {
                data: {
                    metadata: {
                        description: props.description,
                        image: props.image,
                        title: props.title,
                    },
                    mode: "transaction",
                    transaction,
                },
                type: "success",
            };
        },
        queryKey: ["bridgeData", stringify(props)],
    });
    let content = null;
    if (!localeQuery.data || bridgeDataQuery.isLoading) {
        content = (_jsx("div", { style: {
                alignItems: "center",
                display: "flex",
                justifyContent: "center",
                minHeight: "350px",
            }, children: _jsx(Spinner, { color: "secondaryText", size: "xl" }) }));
    }
    else if (bridgeDataQuery.data?.type === "unsupported_token") {
        // Show unsupported token screen
        content = _jsx(UnsupportedTokenScreen, { chain: bridgeDataQuery.data.chain });
    }
    else if (bridgeDataQuery.data?.type === "success") {
        // Show normal bridge orchestrator
        content = (_jsx(BridgeOrchestrator, { client: props.client, connectLocale: localeQuery.data, connectOptions: props.connectOptions, onCancel: () => {
                props.onCancel?.();
            }, onComplete: () => {
                props.onSuccess?.();
            }, onError: (err) => {
                props.onError?.(err);
            }, paymentLinkId: props.paymentLinkId, presetOptions: props.presetOptions, purchaseData: props.purchaseData, receiverAddress: undefined, uiOptions: bridgeDataQuery.data.data }));
    }
    return (_jsx(CustomThemeProvider, { theme: theme, children: _jsx(EmbedContainer, { className: props.className, modalSize: "compact", style: props.style, children: _jsx(DynamicHeight, { children: content }) }) }));
}
//# sourceMappingURL=TransactionWidget.js.map