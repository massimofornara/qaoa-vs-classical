import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { useQuery } from "@tanstack/react-query";
import { convertCryptoToFiat } from "../../../../../../../pay/convert/cryptoToFiat.js";
import { formatNumber } from "../../../../../../../utils/formatNumber.js";
import { fontSize } from "../../../../../../core/design-system/index.js";
import { Skeleton } from "../../../../components/Skeleton.js";
import { Text } from "../../../../components/text.js";
import { useDebouncedValue } from "../../../../hooks/useDebouncedValue.js";
import { getTokenAddress } from "../../nativeToken.js";
export function FiatValue(props) {
    const deferredTokenAmount = useDebouncedValue(props.tokenAmount, 500);
    const cryptoToFiatQuery = useQuery({
        queryFn: () => convertCryptoToFiat({
            chain: props.chain,
            client: props.client,
            fromAmount: Number(deferredTokenAmount),
            fromTokenAddress: getTokenAddress(props.token),
            to: "USD",
        }),
        queryKey: [
            "cryptoToFiat",
            props.chain.id,
            getTokenAddress(props.token),
            deferredTokenAmount,
        ],
    });
    if (cryptoToFiatQuery.isLoading) {
        return _jsx(Skeleton, { height: fontSize.lg, width: "50px" });
    }
    return cryptoToFiatQuery.data?.result ? (_jsxs(Text, { ...props, children: ["$", Number(formatNumber(cryptoToFiatQuery.data.result, 2).toFixed(2)).toLocaleString(undefined, {
                maximumFractionDigits: 2,
                minimumFractionDigits: 2,
            })] })) : null;
}
//# sourceMappingURL=FiatValue.js.map