"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BuyTokenInput = BuyTokenInput;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const index_js_1 = require("../../../../../../core/design-system/index.js");
const basic_js_1 = require("../../../../components/basic.js");
const formElements_js_1 = require("../../../../components/formElements.js");
const Spacer_js_1 = require("../../../../components/Spacer.js");
const TokenRow_js_1 = require("../../../../components/token/TokenRow.js");
const TokenSymbol_js_1 = require("../../../../components/token/TokenSymbol.js");
const utils_js_1 = require("../utils.js");
const FiatValue_js_1 = require("./FiatValue.js");
/**
 * @internal
 */
function BuyTokenInput(props) {
    const getWidth = () => {
        let chars = props.value.replace(".", "").length;
        const hasDot = props.value.includes(".");
        if (hasDot) {
            chars += 0.3;
        }
        return `calc(${`${Math.max(1, chars)}ch`} + 6px)`;
    };
    const inputRef = (0, react_1.useRef)(null);
    return ((0, jsx_runtime_1.jsxs)(basic_js_1.Container, { children: [(0, jsx_runtime_1.jsx)("div", { onClick: () => {
                    inputRef.current?.focus();
                }, children: (0, jsx_runtime_1.jsxs)(basic_js_1.Container, { center: "both", flex: "row", gap: "xs", style: {
                        flexWrap: "nowrap",
                    }, children: [(0, jsx_runtime_1.jsx)(formElements_js_1.Input, { "data-placeholder": props.value === "", disabled: props.freezeAmount, inputMode: "decimal", onChange: (e) => {
                                let value = e.target.value;
                                // Replace comma with period if it exists
                                value = value.replace(",", ".");
                                if (value.startsWith(".")) {
                                    value = `0${value}`;
                                }
                                const numValue = Number(value);
                                if (Number.isNaN(numValue)) {
                                    return;
                                }
                                if (value.startsWith("0") && !value.startsWith("0.")) {
                                    props.onChange(value.slice(1));
                                }
                                else {
                                    props.onChange(value);
                                }
                            }, onClick: (e) => {
                                // put cursor at the end of the input
                                if (props.value === "") {
                                    e.currentTarget.setSelectionRange(e.currentTarget.value.length, e.currentTarget.value.length);
                                }
                            }, pattern: "^[0-9]*[.,]?[0-9]*$", placeholder: "0", ref: inputRef, style: {
                                border: "none",
                                borderRadius: "0",
                                boxShadow: "none",
                                fontSize: (0, utils_js_1.getBuyTokenAmountFontSize)(props.value),
                                fontWeight: 600,
                                maxWidth: "calc(100% - 100px)",
                                padding: "0",
                                paddingBlock: "2px",
                                textAlign: "right",
                                width: getWidth(),
                            }, tabIndex: -1, type: "text", value: props.value || "0", variant: "outline" }), (0, jsx_runtime_1.jsx)(TokenSymbol_js_1.TokenSymbol, { chain: props.chain, color: "secondaryText", size: "lg", token: props.token })] }) }), (0, jsx_runtime_1.jsx)(basic_js_1.Container, { center: "both", flex: "row", style: {
                    height: index_js_1.fontSize.xl,
                }, children: (0, jsx_runtime_1.jsx)(FiatValue_js_1.FiatValue, { chain: props.chain, client: props.client, size: "md", token: props.token, tokenAmount: props.value }) }), !props.hideTokenSelector && ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "md" }), (0, jsx_runtime_1.jsx)(basic_js_1.Container, { center: "x", flex: "row", children: (0, jsx_runtime_1.jsx)(TokenRow_js_1.TokenRow, { chain: props.chain, client: props.client, freezeChainAndToken: props.freezeChainAndToken, onSelectToken: props.onSelectToken, token: props.token }) })] }))] }));
}
//# sourceMappingURL=BuyTokenInput.js.map