"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TokenSelectorScreen = TokenSelectorScreen;
const jsx_runtime_1 = require("react/jsx-runtime");
const styled_1 = require("@emotion/styled");
const react_icons_1 = require("@radix-ui/react-icons");
const pay_js_1 = require("../../../../../../../analytics/track/pay.js");
const CustomThemeProvider_js_1 = require("../../../../../../core/design-system/CustomThemeProvider.js");
const index_js_1 = require("../../../../../../core/design-system/index.js");
const useChainQuery_js_1 = require("../../../../../../core/hooks/others/useChainQuery.js");
const useActiveAccount_js_1 = require("../../../../../../core/hooks/wallets/useActiveAccount.js");
const useActiveWallet_js_1 = require("../../../../../../core/hooks/wallets/useActiveWallet.js");
const useConnectedWallets_js_1 = require("../../../../../../core/hooks/wallets/useConnectedWallets.js");
const useDisconnect_js_1 = require("../../../../../../core/hooks/wallets/useDisconnect.js");
const LoadingScreen_js_1 = require("../../../../../wallets/shared/LoadingScreen.js");
const basic_js_1 = require("../../../../components/basic.js");
const buttons_js_1 = require("../../../../components/buttons.js");
const Spacer_js_1 = require("../../../../components/Spacer.js");
const TextDivider_js_1 = require("../../../../components/TextDivider.js");
const TokenIcon_js_1 = require("../../../../components/TokenIcon.js");
const text_js_1 = require("../../../../components/text.js");
const OutlineWalletIcon_js_1 = require("../../../icons/OutlineWalletIcon.js");
const formatTokenBalance_js_1 = require("../../formatTokenBalance.js");
const nativeToken_js_1 = require("../../nativeToken.js");
const FiatValue_js_1 = require("./FiatValue.js");
const fetchBalancesForWallet_js_1 = require("./fetchBalancesForWallet.js");
const WalletRow_js_1 = require("./WalletRow.js");
function TokenSelectorScreen(props) {
    const connectedWallets = (0, useConnectedWallets_js_1.useConnectedWallets)();
    const activeAccount = (0, useActiveAccount_js_1.useActiveAccount)();
    const activeWallet = (0, useActiveWallet_js_1.useActiveWallet)();
    const chainInfo = (0, useChainQuery_js_1.useChainMetadata)(props.toChain);
    const theme = (0, CustomThemeProvider_js_1.useCustomTheme)();
    const walletsAndBalances = (0, fetchBalancesForWallet_js_1.useWalletsAndBalances)({
        client: props.client,
        mode: props.mode,
        sourceSupportedTokens: props.sourceSupportedTokens || [],
        toChain: props.toChain,
        toToken: props.toToken,
    });
    if (walletsAndBalances.isLoading ||
        chainInfo.isLoading ||
        !chainInfo.data ||
        !props.sourceSupportedTokens) {
        return (0, jsx_runtime_1.jsx)(LoadingScreen_js_1.LoadingScreen, {});
    }
    const filteredWallets = Array.from(walletsAndBalances.data?.entries() || [])
        .filter(([w]) => !props.hiddenWallets?.includes(w.id))
        .filter(([, balances]) => {
        const hasEnoughBalance = balances.some((b) => b.balance.value > 0);
        return hasEnoughBalance;
    });
    return ((0, jsx_runtime_1.jsxs)(basic_js_1.Container, { animate: "fadein", style: {
            minHeight: "200px",
        }, children: [filteredWallets.length === 0 ? ((0, jsx_runtime_1.jsx)(basic_js_1.Container, { flex: "column", gap: "xs", py: "lg", children: (0, jsx_runtime_1.jsxs)(text_js_1.Text, { center: true, color: "secondaryText", size: "xs", children: ["No suitable payment token found", (0, jsx_runtime_1.jsx)("br", {}), "in connected wallets"] }) })) : ((0, jsx_runtime_1.jsxs)(basic_js_1.Container, { flex: "column", gap: "xs", children: [(0, jsx_runtime_1.jsx)(text_js_1.Text, { size: "sm", children: "Select payment token" }), (0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "xs" })] })), (0, jsx_runtime_1.jsx)(basic_js_1.Container, { scrollY: true, style: {
                    maxHeight: "350px",
                }, children: (0, jsx_runtime_1.jsxs)(basic_js_1.Container, { flex: "column", gap: "sm", children: [filteredWallets.map(([w, balances]) => {
                            const address = w.address;
                            const wallet = connectedWallets.find((w) => w.getAccount()?.address === address);
                            if (!wallet)
                                return null;
                            return ((0, jsx_runtime_1.jsx)(WalletRowWithBalances, { address: address, balances: balances, client: props.client, onClick: (wallet, token, chain) => {
                                    (0, pay_js_1.trackPayEvent)({
                                        chainId: chain.id,
                                        client: props.client,
                                        event: "choose_payment_method_token",
                                        fromToken: (0, nativeToken_js_1.isNativeToken)(token) ? undefined : token.address,
                                        toChainId: props.toChain.id,
                                        toToken: (0, nativeToken_js_1.isNativeToken)(props.toToken)
                                            ? undefined
                                            : props.toToken.address,
                                        walletAddress: activeAccount?.address,
                                        walletType: activeWallet?.id,
                                    });
                                    props.onSelectToken(wallet, token, chain);
                                }, wallet: wallet }, w.id));
                        }), filteredWallets.length > 0 && (0, jsx_runtime_1.jsx)(TextDivider_js_1.TextDivider, { text: "OR" }), (0, jsx_runtime_1.jsx)(buttons_js_1.Button, { bg: "tertiaryBg", fullWidth: true, onClick: () => {
                                (0, pay_js_1.trackPayEvent)({
                                    client: props.client,
                                    event: "choose_payment_method_another_wallet",
                                    toChainId: props.toChain.id,
                                    toToken: (0, nativeToken_js_1.isNativeToken)(props.toToken)
                                        ? undefined
                                        : props.toToken.address,
                                    walletAddress: activeAccount?.address,
                                    walletType: activeWallet?.id,
                                });
                                props.onConnect();
                            }, style: {
                                border: `1px solid ${theme.colors.borderColor}`,
                                padding: index_js_1.spacing.sm,
                            }, variant: "secondary", children: (0, jsx_runtime_1.jsxs)(basic_js_1.Container, { center: "y", color: "secondaryIconColor", expand: true, flex: "row", gap: "sm", children: [(0, jsx_runtime_1.jsx)(OutlineWalletIcon_js_1.OutlineWalletIcon, { size: index_js_1.iconSize.md }), (0, jsx_runtime_1.jsx)(text_js_1.Text, { color: "primaryText", size: "sm", children: "Pay with another wallet" })] }) }), props.fiatSupported && ((0, jsx_runtime_1.jsx)(buttons_js_1.Button, { bg: "tertiaryBg", fullWidth: true, onClick: () => {
                                (0, pay_js_1.trackPayEvent)({
                                    client: props.client,
                                    event: "choose_payment_method_with_card",
                                    toChainId: props.toChain.id,
                                    toToken: (0, nativeToken_js_1.isNativeToken)(props.toToken)
                                        ? undefined
                                        : props.toToken.address,
                                    walletAddress: activeAccount?.address,
                                    walletType: activeWallet?.id,
                                });
                                props.onPayWithFiat();
                            }, style: {
                                border: `1px solid ${theme.colors.borderColor}`,
                                padding: index_js_1.spacing.sm,
                            }, variant: "secondary", children: (0, jsx_runtime_1.jsxs)(basic_js_1.Container, { center: "y", color: "secondaryIconColor", expand: true, flex: "row", gap: "sm", children: [(0, jsx_runtime_1.jsx)(react_icons_1.CardStackIcon, { height: index_js_1.iconSize.md, width: index_js_1.iconSize.md }), (0, jsx_runtime_1.jsx)(text_js_1.Text, { color: "primaryText", size: "sm", children: "Pay with card" })] }) }))] }) })] }));
}
function WalletRowWithBalances(props) {
    const theme = (0, CustomThemeProvider_js_1.useCustomTheme)();
    const displayedBalances = props.balances;
    const activeAccount = (0, useActiveAccount_js_1.useActiveAccount)();
    const { disconnect } = (0, useDisconnect_js_1.useDisconnect)();
    const isActiveAccount = activeAccount?.address === props.address;
    return ((0, jsx_runtime_1.jsxs)(basic_js_1.Container, { flex: "column", style: {
            border: `1px solid ${theme.colors.borderColor}`,
            borderRadius: index_js_1.radius.lg,
        }, children: [(0, jsx_runtime_1.jsxs)(basic_js_1.Container, { bg: "tertiaryBg", flex: "row", gap: "sm", style: {
                    borderBottom: `1px solid ${theme.colors.borderColor}`,
                    borderTopLeftRadius: index_js_1.radius.lg,
                    borderTopRightRadius: index_js_1.radius.lg,
                    justifyContent: "space-between",
                    padding: index_js_1.spacing.sm,
                    paddingRight: index_js_1.spacing.xs,
                }, children: [(0, jsx_runtime_1.jsx)(WalletRow_js_1.WalletRow, { ...props }), !isActiveAccount && ((0, jsx_runtime_1.jsx)(buttons_js_1.Button, { onClick: () => disconnect(props.wallet), style: {
                            color: theme.colors.secondaryText,
                            padding: index_js_1.spacing.xxs,
                        }, variant: "ghost", children: (0, jsx_runtime_1.jsx)(react_icons_1.Cross2Icon, { height: index_js_1.iconSize.sm, width: index_js_1.iconSize.sm }) }))] }), (0, jsx_runtime_1.jsx)(basic_js_1.Container, { flex: "column", children: props.balances.length > 0 ? (displayedBalances.map((b, idx) => ((0, jsx_runtime_1.jsx)(TokenBalanceRow, { client: props.client, onClick: () => props.onClick(props.wallet, b.token, b.chain), style: {
                        borderBottom: idx === displayedBalances.length - 1
                            ? "none"
                            : `1px solid ${theme.colors.borderColor}`,
                        borderBottomLeftRadius: idx === displayedBalances.length - 1 ? index_js_1.radius.lg : 0,
                        borderBottomRightRadius: idx === displayedBalances.length - 1 ? index_js_1.radius.lg : 0,
                        borderTopLeftRadius: 0,
                        borderTopRightRadius: 0,
                    }, tokenBalance: b, wallet: props.wallet }, `${b.token.address}-${b.chain.id}`)))) : ((0, jsx_runtime_1.jsx)(basic_js_1.Container, { style: { padding: index_js_1.spacing.sm }, children: (0, jsx_runtime_1.jsx)(text_js_1.Text, { color: "secondaryText", size: "sm", children: "Insufficient Funds" }) })) })] }));
}
function TokenBalanceRow(props) {
    const { tokenBalance, wallet, onClick, client, style } = props;
    const chainInfo = (0, useChainQuery_js_1.useChainName)(tokenBalance.chain);
    return ((0, jsx_runtime_1.jsxs)(StyledButton, { onClick: () => onClick(tokenBalance.token, wallet), style: {
            ...style,
            display: "flex",
            justifyContent: "space-between",
            minWidth: 0, // Needed for text truncation to work
        }, variant: "secondary", children: [(0, jsx_runtime_1.jsxs)(basic_js_1.Container, { center: "y", flex: "row", gap: "sm", style: {
                    flex: "1 1 50%",
                    flexWrap: "nowrap",
                    maxWidth: "50%",
                    minWidth: 0,
                    overflow: "hidden",
                }, children: [(0, jsx_runtime_1.jsx)(TokenIcon_js_1.TokenIcon, { chain: tokenBalance.chain, client: client, size: "md", token: tokenBalance.token }), (0, jsx_runtime_1.jsxs)(basic_js_1.Container, { flex: "column", gap: "4xs", style: { minWidth: 0 }, children: [(0, jsx_runtime_1.jsx)(text_js_1.Text, { color: "primaryText", size: "xs", style: {
                                    overflow: "hidden",
                                    textOverflow: "ellipsis",
                                    whiteSpace: "nowrap",
                                }, children: tokenBalance.token.symbol }), chainInfo && ((0, jsx_runtime_1.jsx)(text_js_1.Text, { size: "xs", style: {
                                    overflow: "hidden",
                                    textOverflow: "ellipsis",
                                    whiteSpace: "nowrap",
                                }, children: chainInfo.name }))] })] }), (0, jsx_runtime_1.jsxs)(basic_js_1.Container, { center: "y", color: "secondaryText", flex: "row", gap: "4xs", style: {
                    flex: "1 1 50%",
                    flexWrap: "nowrap",
                    justifyContent: "flex-end",
                    maxWidth: "50%",
                    minWidth: 0,
                }, children: [(0, jsx_runtime_1.jsxs)(basic_js_1.Container, { color: "secondaryText", flex: "column", gap: "4xs", style: {
                            alignItems: "flex-end",
                            minWidth: 0,
                            overflow: "hidden",
                        }, children: [(0, jsx_runtime_1.jsx)(text_js_1.Text, { color: "primaryText", size: "xs", style: {
                                    overflow: "hidden",
                                    textOverflow: "ellipsis",
                                    whiteSpace: "nowrap",
                                }, children: (0, formatTokenBalance_js_1.formatTokenBalance)(tokenBalance.balance, true, 2) }), (0, jsx_runtime_1.jsx)(FiatValue_js_1.FiatValue, { chain: tokenBalance.chain, client: client, size: "xs", token: tokenBalance.token, tokenAmount: tokenBalance.balance.displayValue })] }), (0, jsx_runtime_1.jsx)(react_icons_1.ChevronRightIcon, { height: index_js_1.iconSize.md, style: { flexShrink: 0 }, width: index_js_1.iconSize.md })] })] }));
}
const StyledButton = /* @__PURE__ */ (0, styled_1.default)(buttons_js_1.Button)((props) => {
    const theme = (0, CustomThemeProvider_js_1.useCustomTheme)();
    return {
        "&:hover": {
            background: theme.colors.secondaryButtonBg,
            transform: "scale(1.01)",
        },
        background: "transparent",
        flexDirection: "row",
        flexWrap: "nowrap",
        gap: index_js_1.spacing.sm,
        justifyContent: "space-between",
        padding: index_js_1.spacing.sm,
        paddingRight: index_js_1.spacing.xs,
        transition: "background 200ms ease, transform 150ms ease",
        ...props.style,
    };
});
//# sourceMappingURL=TokenSelectorScreen.js.map