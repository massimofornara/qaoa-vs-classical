"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PayProviderSelection = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_icons_1 = require("@radix-ui/react-icons");
const index_js_1 = require("../../../../../core/design-system/index.js");
const basic_js_1 = require("../../../components/basic.js");
const buttons_js_1 = require("../../../components/buttons.js");
const text_js_1 = require("../../../components/text.js");
const utils_js_1 = require("./utils.js");
/**
 * Shows the selected payment provider based on the preferred provider OR the quoted provider.
 * @internal
 */
const PayProviderSelection = (props) => {
    const ProviderItem = ((0, jsx_runtime_1.jsxs)(basic_js_1.Container, { center: "y", color: "secondaryText", flex: "row", gap: "xxs", style: { padding: index_js_1.spacing.md }, children: [(0, jsx_runtime_1.jsx)(text_js_1.Text, { size: "xs", children: (0, utils_js_1.getProviderLabel)(props.preferredProvider ?? props.quotedProvider ?? "") }), props.supportedProviders.length > 1 && ((0, jsx_runtime_1.jsx)(react_icons_1.ChevronDownIcon, { height: index_js_1.iconSize.sm, width: index_js_1.iconSize.sm }))] }));
    return ((0, jsx_runtime_1.jsxs)(basic_js_1.Container, { bg: "tertiaryBg", borderColor: "borderColor", flex: "row", style: {
            alignItems: "center",
            borderBottom: "none",
            borderStyle: "solid",
            borderWidth: "1px",
            justifyContent: "space-between",
            paddingLeft: index_js_1.spacing.md,
        }, children: [(0, jsx_runtime_1.jsx)(text_js_1.Text, { color: "secondaryText", size: "xs", children: "Provider" }), props.supportedProviders.length > 1 ? ((0, jsx_runtime_1.jsx)(buttons_js_1.Button, { onClick: props.onShowProviders, style: { padding: 0 }, variant: "ghost" // Padding is managed within children as the button is conditional
                , children: ProviderItem })) : (ProviderItem)] }));
};
exports.PayProviderSelection = PayProviderSelection;
//# sourceMappingURL=PayProviderSelection.js.map