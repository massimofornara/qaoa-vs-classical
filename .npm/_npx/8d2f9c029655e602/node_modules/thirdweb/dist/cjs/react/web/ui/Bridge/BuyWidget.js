"use strict";
"use client";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BuyWidget = BuyWidget;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_query_1 = require("@tanstack/react-query");
const addresses_js_1 = require("../../../../constants/addresses.js");
const get_token_js_1 = require("../../../../pay/convert/get-token.js");
const address_js_1 = require("../../../../utils/address.js");
const json_js_1 = require("../../../../utils/json.js");
const CustomThemeProvider_js_1 = require("../../../core/design-system/CustomThemeProvider.js");
const getConnectLocale_js_1 = require("../ConnectWallet/locale/getConnectLocale.js");
const ConnectEmbed_js_1 = require("../ConnectWallet/Modal/ConnectEmbed.js");
const DynamicHeight_js_1 = require("../components/DynamicHeight.js");
const Spinner_js_1 = require("../components/Spinner.js");
const BridgeOrchestrator_js_1 = require("./BridgeOrchestrator.js");
const UnsupportedTokenScreen_js_1 = require("./UnsupportedTokenScreen.js");
/**
 * Widget is a prebuilt UI for purchasing a specific token.
 *
 * @param props - Props of type [`BuyWidgetProps`](https://portal.thirdweb.com/references/typescript/v5/BuyWidgetProps) to configure the BuyWidget component.
 *
 * @example
 * ### Basic usage
 *
 * The `BuyWidget` component requires `client`, `chain`, and `amount` props to function.
 *
 * ```tsx
 * import { ethereum } from "thirdweb/chains";
 *
 * <BuyWidget
 *   client={client}
 *   chain={ethereum}
 *   amount="0.1"
 * />
 * ```
 *
 * ### Buy a specific token
 *
 * You can specify a token to purchase by passing the `tokenAddress` prop.
 *
 * ```tsx
 * <BuyWidget
 *   client={client}
 *   chain={ethereum}
 *   amount="100"
 *   tokenAddress="0xA0b86a33E6417E4df2057B2d3C6d9F7cc11b0a70"
 * />
 * ```
 *
 * ### Customize the UI
 *
 * You can customize the UI of the `BuyWidget` component by passing a custom theme object to the `theme` prop.
 *
 * ```tsx
 * <BuyWidget
 *   client={client}
 *   chain={ethereum}
 *   amount="0.1"
 *   theme={darkTheme({
 *     colors: {
 *       modalBg: "red",
 *     },
 *   })}
 * />
 * ```
 *
 * Refer to the [`Theme`](https://portal.thirdweb.com/references/typescript/v5/Theme) type for more details.
 *
 * ### Update the Title
 *
 * You can update the title of the widget by passing a `title` prop to the `BuyWidget` component.
 *
 * ```tsx
 * <BuyWidget
 *   client={client}
 *   chain={ethereum}
 *   amount="0.1"
 *   title="Buy ETH"
 * />
 * ```
 *
 * ### Configure the wallet connection
 *
 * You can customize the wallet connection flow by passing a `connectOptions` object to the `BuyWidget` component.
 *
 * ```tsx
 * <BuyWidget
 *   client={client}
 *   chain={ethereum}
 *   amount="0.1"
 *   connectOptions={{
 *     connectModal: {
 *       size: 'compact',
 *       title: "Sign in",
 *     }
 *   }}
 * />
 * ```
 *
 * Refer to the [`BuyWidgetConnectOptions`](https://portal.thirdweb.com/references/typescript/v5/BuyWidgetConnectOptions) type for more details.
 *
 * @bridge
 * @beta
 * @react
 */
function BuyWidget(props) {
    const localeQuery = (0, getConnectLocale_js_1.useConnectLocale)(props.locale || "en_US");
    const theme = props.theme || "dark";
    const bridgeDataQuery = (0, react_query_1.useQuery)({
        queryFn: async () => {
            if (!props.tokenAddress ||
                ((0, address_js_1.isAddress)(props.tokenAddress) &&
                    (0, address_js_1.checksumAddress)(props.tokenAddress) ===
                        (0, address_js_1.checksumAddress)(addresses_js_1.NATIVE_TOKEN_ADDRESS))) {
                const ETH = await (0, get_token_js_1.getToken)(props.client, addresses_js_1.NATIVE_TOKEN_ADDRESS, props.chain.id);
                return {
                    data: {
                        destinationToken: ETH,
                        initialAmount: props.amount,
                        metadata: {
                            description: props.description,
                            image: props.image,
                            title: props.title,
                        },
                        mode: "fund_wallet",
                    },
                    type: "success",
                };
            }
            const token = await (0, get_token_js_1.getToken)(props.client, props.tokenAddress, props.chain.id).catch((err) => {
                err.message.includes("not supported") ? undefined : Promise.reject(err);
            });
            if (!token) {
                return {
                    chain: props.chain,
                    tokenAddress: props.tokenAddress,
                    type: "unsupported_token",
                };
            }
            return {
                data: {
                    destinationToken: token,
                    initialAmount: props.amount,
                    metadata: {
                        description: props.description,
                        image: props.image,
                        title: props.title,
                    },
                    mode: "fund_wallet",
                },
                type: "success",
            };
        },
        queryKey: ["bridgeData", (0, json_js_1.stringify)(props)],
    });
    let content = null;
    if (!localeQuery.data || bridgeDataQuery.isLoading) {
        content = ((0, jsx_runtime_1.jsx)("div", { style: {
                alignItems: "center",
                display: "flex",
                justifyContent: "center",
                minHeight: "350px",
            }, children: (0, jsx_runtime_1.jsx)(Spinner_js_1.Spinner, { color: "secondaryText", size: "xl" }) }));
    }
    else if (bridgeDataQuery.data?.type === "unsupported_token") {
        // Show unsupported token screen
        content = (0, jsx_runtime_1.jsx)(UnsupportedTokenScreen_js_1.UnsupportedTokenScreen, { chain: bridgeDataQuery.data.chain });
    }
    else if (bridgeDataQuery.data?.type === "success") {
        // Show normal bridge orchestrator
        content = ((0, jsx_runtime_1.jsx)(BridgeOrchestrator_js_1.BridgeOrchestrator, { client: props.client, connectLocale: localeQuery.data, connectOptions: props.connectOptions, onCancel: () => {
                props.onCancel?.();
            }, onComplete: () => {
                props.onSuccess?.();
            }, onError: (err) => {
                props.onError?.(err);
            }, paymentLinkId: props.paymentLinkId, presetOptions: props.presetOptions, purchaseData: props.purchaseData, receiverAddress: undefined, uiOptions: bridgeDataQuery.data.data }));
    }
    return ((0, jsx_runtime_1.jsx)(CustomThemeProvider_js_1.CustomThemeProvider, { theme: theme, children: (0, jsx_runtime_1.jsx)(ConnectEmbed_js_1.EmbedContainer, { className: props.className, modalSize: "compact", style: props.style, children: (0, jsx_runtime_1.jsx)(DynamicHeight_js_1.DynamicHeight, { children: content }) }) }));
}
//# sourceMappingURL=BuyWidget.js.map