"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SwapStatusScreen = SwapStatusScreen;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_icons_1 = require("@radix-ui/react-icons");
const react_query_1 = require("@tanstack/react-query");
const react_1 = require("react");
const index_js_1 = require("../../../../../../core/design-system/index.js");
const useBuyWithCryptoStatus_js_1 = require("../../../../../../core/hooks/pay/useBuyWithCryptoStatus.js");
const invalidateWalletBalance_js_1 = require("../../../../../../core/providers/invalidateWalletBalance.js");
const basic_js_1 = require("../../../../components/basic.js");
const buttons_js_1 = require("../../../../components/buttons.js");
const Spacer_js_1 = require("../../../../components/Spacer.js");
const Spinner_js_1 = require("../../../../components/Spinner.js");
const text_js_1 = require("../../../../components/text.js");
const AccentFailIcon_js_1 = require("../../../icons/AccentFailIcon.js");
const SwapDetailsScreen_js_1 = require("../pay-transactions/SwapDetailsScreen.js");
function SwapStatusScreen(props) {
    const { onSuccess } = props;
    const [showDetails, setShowDetails] = (0, react_1.useState)(false);
    const swapStatus = (0, useBuyWithCryptoStatus_js_1.useBuyWithCryptoStatus)({
        chainId: props.fromChain.id,
        client: props.client,
        transactionHash: props.swapTxHash,
    });
    let uiStatus = "pending";
    if (swapStatus.data?.status === "COMPLETED") {
        uiStatus = "success";
    }
    else if (swapStatus.data?.status === "FAILED") {
        uiStatus = "failed";
    }
    if (swapStatus.data?.status === "COMPLETED" &&
        swapStatus.data?.subStatus === "PARTIAL_SUCCESS") {
        uiStatus = "partialSuccess";
    }
    const purchaseCbCalled = (0, react_1.useRef)(false);
    (0, react_1.useEffect)(() => {
        if (purchaseCbCalled.current || !onSuccess) {
            return;
        }
        if (swapStatus.data?.status === "COMPLETED") {
            purchaseCbCalled.current = true;
            onSuccess(swapStatus.data);
        }
    }, [onSuccess, swapStatus]);
    const queryClient = (0, react_query_1.useQueryClient)();
    const balanceInvalidated = (0, react_1.useRef)(false);
    (0, react_1.useEffect)(() => {
        if ((uiStatus === "success" || uiStatus === "partialSuccess") &&
            !balanceInvalidated.current) {
            balanceInvalidated.current = true;
            (0, invalidateWalletBalance_js_1.invalidateWalletBalance)(queryClient);
        }
    }, [queryClient, uiStatus]);
    const swapDetails = swapStatus.data && swapStatus.data.status !== "NOT_FOUND" ? ((0, jsx_runtime_1.jsx)(SwapDetailsScreen_js_1.SwapTxDetailsTable, { client: props.client, status: swapStatus.data, type: "status" })) : props.quote ? ((0, jsx_runtime_1.jsx)(SwapDetailsScreen_js_1.SwapTxDetailsTable, { client: props.client, quote: props.quote, type: "quote" })) : null;
    if (showDetails) {
        return ((0, jsx_runtime_1.jsx)(basic_js_1.Container, { animate: "fadein", children: (0, jsx_runtime_1.jsxs)(basic_js_1.Container, { p: "lg", children: [(0, jsx_runtime_1.jsx)(basic_js_1.ModalHeader, { onBack: () => setShowDetails(false), title: "Transaction Details" }), (0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "xl" }), swapDetails] }) }));
    }
    return ((0, jsx_runtime_1.jsx)(basic_js_1.Container, { animate: "fadein", children: (0, jsx_runtime_1.jsxs)(basic_js_1.Container, { p: "lg", children: [(0, jsx_runtime_1.jsx)(basic_js_1.ModalHeader, { onBack: props.onBack, title: props.title }), (0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "sm" }), uiStatus === "success" && ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "md" }), (0, jsx_runtime_1.jsxs)(basic_js_1.Container, { center: "x", color: "success", flex: "column", children: [(0, jsx_runtime_1.jsx)(react_icons_1.CheckCircledIcon, { height: index_js_1.iconSize["3xl"], width: index_js_1.iconSize["3xl"] }), (0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "sm" }), (0, jsx_runtime_1.jsx)(text_js_1.Text, { color: "primaryText", size: "lg", children: "Buy Complete" })] }), (0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "xl" }), (0, jsx_runtime_1.jsx)(buttons_js_1.Button, { fullWidth: true, onClick: () => setShowDetails(true), variant: "outline", children: "View transaction details" }), (0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "sm" }), (0, jsx_runtime_1.jsx)(buttons_js_1.Button, { fullWidth: true, onClick: props.onDone, variant: "accent", children: props.transactionMode ? "Continue Transaction" : "Done" })] })), uiStatus === "partialSuccess" &&
                    swapStatus.data?.status !== "NOT_FOUND" &&
                    swapStatus.data?.destination && ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "lg" }), (0, jsx_runtime_1.jsxs)(basic_js_1.Container, { center: "x", color: "success", flex: "column", children: [(0, jsx_runtime_1.jsx)(AccentFailIcon_js_1.AccentFailIcon, { size: index_js_1.iconSize["3xl"] }), (0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "xl" }), (0, jsx_runtime_1.jsx)(text_js_1.Text, { color: "primaryText", size: "lg", children: "Incomplete" }), (0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "sm" }), (0, jsx_runtime_1.jsxs)(text_js_1.Text, { color: "danger", size: "sm", children: ["Expected ", swapStatus.data.quote.toToken.symbol, ", Got", " ", swapStatus.data.destination.token.symbol, " instead"] })] }), (0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "xl" })] })), uiStatus === "failed" && ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "xxl" }), (0, jsx_runtime_1.jsxs)(basic_js_1.Container, { flex: "column", children: [(0, jsx_runtime_1.jsxs)(basic_js_1.Container, { center: "both", flex: "column", children: [(0, jsx_runtime_1.jsx)(AccentFailIcon_js_1.AccentFailIcon, { size: index_js_1.iconSize["3xl"] }), (0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "xl" }), (0, jsx_runtime_1.jsx)(text_js_1.Text, { color: "primaryText", size: "lg", children: "Transaction Failed" }), (0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "sm" }), (0, jsx_runtime_1.jsxs)(text_js_1.Text, { size: "sm", children: ["Your transaction ", `couldn't`, " be processed"] })] }), (0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "xl" }), (0, jsx_runtime_1.jsx)(buttons_js_1.Button, { fullWidth: true, onClick: () => setShowDetails(true), variant: "outline", children: "View transaction details" }), (0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "sm" }), (0, jsx_runtime_1.jsx)(buttons_js_1.Button, { fullWidth: true, onClick: props.onTryAgain, variant: "accent", children: "Try Again" })] })] })), uiStatus === "pending" && ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "xl" }), (0, jsx_runtime_1.jsxs)(basic_js_1.Container, { animate: "fadein", center: "both", flex: "column", children: [(0, jsx_runtime_1.jsx)("div", { style: {
                                        alignItems: "center",
                                        display: "flex",
                                        justifyContent: "center",
                                        position: "relative",
                                    }, children: (0, jsx_runtime_1.jsx)(Spinner_js_1.Spinner, { color: "accentText", size: "3xl" }) }), (0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "lg" }), (0, jsx_runtime_1.jsx)(text_js_1.Text, { color: "primaryText", size: "lg", children: "Buy Pending" }), (0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "sm" }), (0, jsx_runtime_1.jsx)(text_js_1.Text, { color: "secondaryText", size: "sm", children: "This may take a minute to complete" })] }), (0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "xl" })] }))] }) }));
}
//# sourceMappingURL=SwapStatusScreen.js.map