"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.OnRampScreen = OnRampScreen;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_query_1 = require("@tanstack/react-query");
const react_1 = require("react");
const pay_js_1 = require("../../../../../../../analytics/track/pay.js");
const utils_js_1 = require("../../../../../../../chains/utils.js");
const contract_js_1 = require("../../../../../../../contract/contract.js");
const allowance_js_1 = require("../../../../../../../extensions/erc20/__generated__/IERC20/read/allowance.js");
const approve_js_1 = require("../../../../../../../extensions/erc20/write/approve.js");
const getQuote_js_1 = require("../../../../../../../pay/buyWithCrypto/getQuote.js");
const getStatus_js_1 = require("../../../../../../../pay/buyWithFiat/getStatus.js");
const isSwapRequiredPostOnramp_js_1 = require("../../../../../../../pay/buyWithFiat/isSwapRequiredPostOnramp.js");
const send_batch_transaction_js_1 = require("../../../../../../../transaction/actions/send-batch-transaction.js");
const send_transaction_js_1 = require("../../../../../../../transaction/actions/send-transaction.js");
const wait_for_tx_receipt_js_1 = require("../../../../../../../transaction/actions/wait-for-tx-receipt.js");
const formatNumber_js_1 = require("../../../../../../../utils/formatNumber.js");
const is_in_app_signer_js_1 = require("../../../../../../../wallets/in-app/core/wallet/is-in-app-signer.js");
const index_js_1 = require("../../../../../../core/design-system/index.js");
const useChainQuery_js_1 = require("../../../../../../core/hooks/others/useChainQuery.js");
const useBuyWithCryptoStatus_js_1 = require("../../../../../../core/hooks/pay/useBuyWithCryptoStatus.js");
const useBuyWithFiatStatus_js_1 = require("../../../../../../core/hooks/pay/useBuyWithFiatStatus.js");
const useConnectedWallets_js_1 = require("../../../../../../core/hooks/wallets/useConnectedWallets.js");
const invalidateWalletBalance_js_1 = require("../../../../../../core/providers/invalidateWalletBalance.js");
const basic_js_1 = require("../../../../components/basic.js");
const buttons_js_1 = require("../../../../components/buttons.js");
const Spacer_js_1 = require("../../../../components/Spacer.js");
const Spinner_js_1 = require("../../../../components/Spinner.js");
const SwitchNetwork_js_1 = require("../../../../components/SwitchNetwork.js");
const text_js_1 = require("../../../../components/text.js");
const TokenSymbol_js_1 = require("../../../../components/token/TokenSymbol.js");
const openOnRamppopup_js_1 = require("../openOnRamppopup.js");
const PayTokenIcon_js_1 = require("../PayTokenIcon.js");
const pendingSwapTx_js_1 = require("../swap/pendingSwapTx.js");
const StepConnector_js_1 = require("../swap/StepConnector.js");
const WalletRow_js_1 = require("../swap/WalletRow.js");
const utils_js_2 = require("../utils.js");
const FiatSteps_js_1 = require("./FiatSteps.js");
function OnRampScreen(props) {
    const connectedWallets = (0, useConnectedWallets_js_1.useConnectedWallets)();
    const isAutoMode = (0, is_in_app_signer_js_1.isInAppSigner)({
        connectedWallets,
        wallet: props.payer.wallet,
    });
    const state = useOnRampScreenState({
        client: props.client,
        isAutoMode,
        onDone: props.onDone,
        onSuccess: props.onSuccess,
        payer: props.payer,
        paymentLinkId: props.paymentLinkId,
        quote: props.quote,
        theme: props.theme,
    });
    const firstStepChainId = state.steps[0]?.step.token.chainId;
    return ((0, jsx_runtime_1.jsxs)(basic_js_1.Container, { p: "lg", children: [(0, jsx_runtime_1.jsx)(basic_js_1.ModalHeader, { onBack: props.onBack, title: props.title }), (0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "xl" }), (0, jsx_runtime_1.jsx)(basic_js_1.Container, { center: "y", flex: "column", gap: "xs", style: {
                    paddingLeft: index_js_1.spacing.md,
                }, children: (0, jsx_runtime_1.jsx)(WalletRow_js_1.WalletRow, { address: props.receiverAddress, client: props.client, iconSize: "md", label: "Recipient wallet", textSize: "sm" }) }), (0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "md" }), (0, jsx_runtime_1.jsx)(basic_js_1.Container, { flex: "column", children: state.steps.map(({ step, status }, index) => ((0, jsx_runtime_1.jsxs)(basic_js_1.Container, { flex: "column", children: [(0, jsx_runtime_1.jsx)(FiatSteps_js_1.StepContainer, { index: index, state: status, style: {
                                flex: "1",
                            }, children: (0, jsx_runtime_1.jsx)(StepUI, { client: props.client, index: index, payer: props.payer, step: step }) }), index < state.steps.length - 1 && (0, jsx_runtime_1.jsx)(StepConnector_js_1.StepConnectorArrow, {})] }, step.action))) }), (0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "md" }), (0, jsx_runtime_1.jsx)(text_js_1.Text, { center: true, color: "secondaryText", size: "xs", style: { padding: `0 ${index_js_1.spacing.xl}` }, children: "Keep this window open until all transactions are complete." }), (0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "lg" }), (0, jsx_runtime_1.jsx)(basic_js_1.Container, { flex: "column", gap: "md", children: !state.isDone &&
                    firstStepChainId &&
                    firstStepChainId !== props.payer.chain.id ? ((0, jsx_runtime_1.jsx)(SwitchNetwork_js_1.SwitchNetworkButton, { fullWidth: true, switchChain: async () => {
                        await props.payer.wallet.switchChain((0, utils_js_1.getCachedChain)(firstStepChainId));
                    }, variant: "accent" })) : ((0, jsx_runtime_1.jsxs)(buttons_js_1.Button, { disabled: state.isLoading, fullWidth: true, gap: "sm", onClick: state.handleContinue, variant: "accent", children: [state.isLoading
                            ? "Processing"
                            : state.isDone
                                ? props.transactionMode
                                    ? "Continue Transaction"
                                    : "Done"
                                : state.isFailed
                                    ? "Retry"
                                    : "Continue", state.isLoading && (0, jsx_runtime_1.jsx)(Spinner_js_1.Spinner, { color: "primaryText", size: "sm" })] })) })] }));
}
function StepUI(props) {
    const { step, client } = props;
    const chain = (0, useChainQuery_js_1.useChainName)((0, utils_js_1.getCachedChain)(step.token.chainId));
    return ((0, jsx_runtime_1.jsx)(basic_js_1.Container, { flex: "column", gap: "xs", py: "3xs", children: (0, jsx_runtime_1.jsxs)(basic_js_1.Container, { center: "y", flex: "row", gap: "sm", style: {
                display: "flex",
                flexWrap: "nowrap",
                justifyContent: "space-between",
            }, children: [(0, jsx_runtime_1.jsx)(PayTokenIcon_js_1.PayTokenIcon, { chain: (0, utils_js_1.getCachedChain)(step.token.chainId), client: client, size: "md", token: {
                        address: step.token.tokenAddress,
                    } }), (0, jsx_runtime_1.jsxs)(basic_js_1.Container, { center: "y", flex: "column", gap: "3xs", style: { flex: "1" }, children: [(0, jsx_runtime_1.jsx)(text_js_1.Text, { color: "primaryText", size: "sm", children: (0, utils_js_2.getProviderLabel)(step.action) }), (0, jsx_runtime_1.jsxs)(basic_js_1.Container, { center: "y", flex: "row", gap: "xs", style: {
                                display: "flex",
                                flexWrap: "nowrap",
                                justifyContent: "space-between",
                            }, children: [(0, jsx_runtime_1.jsxs)(basic_js_1.Container, { center: "y", flex: "row", gap: "xxs", style: {
                                        flex: "1 1 60%",
                                        flexWrap: "nowrap",
                                        maxWidth: "60%",
                                        minWidth: 0,
                                        overflow: "hidden",
                                    }, children: [(0, jsx_runtime_1.jsx)(text_js_1.Text, { color: "primaryText", size: "sm", children: (0, formatNumber_js_1.formatNumber)(Number(step.amount), 5) }), (0, jsx_runtime_1.jsx)(TokenSymbol_js_1.TokenSymbol, { chain: (0, utils_js_1.getCachedChain)(step.token.chainId), color: "secondaryText", size: "sm", token: {
                                                address: step.token.tokenAddress,
                                                name: step.token.name || "",
                                                symbol: step.token.symbol || "",
                                            } })] }), (0, jsx_runtime_1.jsx)(basic_js_1.Container, { center: "y", flex: "row", gap: "xs", style: {
                                        flex: "1 1 40%",
                                        flexWrap: "nowrap",
                                        justifyContent: "flex-end",
                                        maxWidth: "40%",
                                        minWidth: 0,
                                    }, children: (0, jsx_runtime_1.jsx)(text_js_1.Text, { size: "xs", style: {
                                            overflow: "hidden",
                                            textOverflow: "ellipsis",
                                            whiteSpace: "nowrap",
                                        }, children: chain.name }) })] })] })] }) }));
}
function useOnRampScreenState(props) {
    const onRampSteps = (0, isSwapRequiredPostOnramp_js_1.getOnRampSteps)(props.quote);
    const [currentStepIndex, setCurrentStepIndex] = (0, react_1.useState)(0);
    const [swapTxHash, setSwapTxHash] = (0, react_1.useState)();
    const [popupWindow, setPopupWindow] = (0, react_1.useState)(null);
    // Track onramp status
    const { uiStatus: fiatOnrampStatus } = useOnRampStatus({
        client: props.client,
        intentId: props.quote.intentId,
        onSuccess: (status) => {
            if (onRampSteps.length === 1) {
                // If only one step, this is the final success
                props.onSuccess(status);
            }
            else {
                // Move to next step (swap)
                setCurrentStepIndex((prev) => prev + 1);
            }
        },
        openedWindow: popupWindow,
    });
    // Get quote for current swap/bridge step if needed
    const previousStep = onRampSteps[currentStepIndex - 1];
    const currentStep = onRampSteps[currentStepIndex];
    // Handle swap execution
    const swapMutation = useSwapMutation({
        client: props.client,
        isFiatFlow: true,
        payer: props.payer,
        paymentLinkId: props.paymentLinkId,
    });
    // Track swap status
    const { uiStatus: swapStatus } = useSwapStatus({
        chainId: swapTxHash?.chainId,
        client: props.client,
        onSuccess: () => {
            if (currentStepIndex === onRampSteps.length - 1) {
                // Last step completed - call final success
                (0, getStatus_js_1.getBuyWithFiatStatus)({
                    client: props.client,
                    intentId: props.quote.intentId,
                }).then(props.onSuccess);
            }
            else {
                // Reset swap state before moving to next step
                setSwapTxHash(undefined);
                swapMutation.reset();
                // Move to next step
                setCurrentStepIndex((prev) => prev + 1);
            }
        },
        transactionHash: swapTxHash?.hash,
    });
    // Map steps to their current status
    const steps = onRampSteps.map((step, index) => {
        let status = "unknown";
        if (index === 0) {
            // First step (onramp) status
            status = fiatOnrampStatus;
        }
        else if (index < currentStepIndex) {
            // Previous steps are completed
            status = "completed";
        }
        else if (index === currentStepIndex) {
            // Current step - could be swap or bridge
            if (swapMutation.isPending) {
                status = "pending";
            }
            else if (swapMutation.error) {
                status = "failed";
            }
            else if (swapTxHash) {
                status = swapStatus;
            }
            else {
                status = "actionRequired";
            }
        }
        return {
            index,
            status,
            step,
        };
    });
    const isLoading = steps.some((step) => step.status === "pending");
    const isDone = steps.every((step) => step.status === "completed");
    const isFailed = steps.some((step) => step.status === "failed");
    // Update handleContinue to handle done state
    const handleContinue = (0, react_1.useCallback)(async () => {
        if (isDone) {
            props.onDone();
            return;
        }
        if (currentStepIndex === 0) {
            // First step - open onramp popup
            const popup = (0, openOnRamppopup_js_1.openOnrampPopup)(props.quote.onRampLink, props.theme);
            (0, pay_js_1.trackPayEvent)({
                amountWei: props.quote.onRampToken.amountWei,
                client: props.client,
                event: "open_onramp_popup",
                toChainId: props.quote.onRampToken.token.chainId,
                toToken: props.quote.onRampToken.token.tokenAddress,
                walletAddress: props.payer.account.address,
                walletType: props.payer.wallet.id,
            });
            setPopupWindow(popup);
            (0, pendingSwapTx_js_1.addPendingTx)({
                intentId: props.quote.intentId,
                type: "fiat",
            });
        }
        else if (previousStep && currentStep && !swapTxHash) {
            // Execute swap/bridge
            try {
                const result = await swapMutation.mutateAsync({
                    amount: currentStep.amount,
                    fromToken: previousStep.token,
                    toToken: currentStep.token,
                });
                setSwapTxHash({
                    chainId: result.chainId,
                    hash: result.transactionHash,
                });
            }
            catch (e) {
                console.error("Failed to execute swap:", e);
            }
        }
        else if (isFailed) {
            // retry the quote step
            setSwapTxHash(undefined);
            swapMutation.reset();
        }
    }, [
        isDone,
        currentStepIndex,
        swapTxHash,
        props.quote,
        props.onDone,
        swapMutation,
        props.theme,
        isFailed,
        swapMutation.reset,
        props.client,
        props.payer.account.address,
        props.payer.wallet.id,
        currentStep,
        previousStep,
    ]);
    // Auto-progress effect
    (0, react_1.useEffect)(() => {
        if (!props.isAutoMode) {
            return;
        }
        // Auto-start next swap step when previous step completes
        if (!isLoading &&
            !isDone &&
            !isFailed &&
            currentStepIndex > 0 &&
            currentStepIndex < onRampSteps.length &&
            !swapTxHash) {
            handleContinue();
        }
    }, [
        props.isAutoMode,
        currentStepIndex,
        swapTxHash,
        onRampSteps.length,
        handleContinue,
        isDone,
        isFailed,
        isLoading,
    ]);
    return {
        handleContinue,
        isDone,
        isFailed,
        isLoading,
        steps,
    };
}
function useOnRampStatus(props) {
    const queryClient = (0, react_query_1.useQueryClient)();
    const statusQuery = (0, useBuyWithFiatStatus_js_1.useBuyWithFiatStatus)({
        client: props.client,
        intentId: props.intentId,
        queryOptions: {
            enabled: !!props.openedWindow,
        },
    });
    let uiStatus = "actionRequired";
    switch (statusQuery.data?.status) {
        case "ON_RAMP_TRANSFER_COMPLETED":
            uiStatus = "completed";
            break;
        case "PAYMENT_FAILED":
            uiStatus = "failed";
            break;
        case "PENDING_PAYMENT":
            uiStatus = "pending";
            break;
        default:
            uiStatus = "actionRequired";
            break;
    }
    const purchaseCbCalled = (0, react_1.useRef)(false);
    (0, react_1.useEffect)(() => {
        if (purchaseCbCalled.current || !props.onSuccess) {
            return;
        }
        if (statusQuery.data && uiStatus === "completed") {
            purchaseCbCalled.current = true;
            props.onSuccess(statusQuery.data);
        }
    }, [props.onSuccess, statusQuery.data, uiStatus]);
    // close the onramp popup if onramp is completed
    (0, react_1.useEffect)(() => {
        if (!props.openedWindow) {
            return;
        }
        if (uiStatus === "completed") {
            try {
                if (props.openedWindow && !props.openedWindow.closed) {
                    props.openedWindow.close();
                }
            }
            catch (e) {
                console.warn("Failed to close payment window:", e);
            }
        }
    }, [props.openedWindow, uiStatus]);
    // invalidate wallet balance when onramp is completed
    const invalidatedBalance = (0, react_1.useRef)(false);
    (0, react_1.useEffect)(() => {
        if (!invalidatedBalance.current && uiStatus === "completed") {
            invalidatedBalance.current = true;
            (0, invalidateWalletBalance_js_1.invalidateWalletBalance)(queryClient);
        }
    }, [uiStatus, queryClient]);
    return { uiStatus };
}
function useSwapStatus(props) {
    const swapStatus = (0, useBuyWithCryptoStatus_js_1.useBuyWithCryptoStatus)(props.transactionHash && props.chainId
        ? {
            chainId: props.chainId,
            client: props.client,
            transactionHash: props.transactionHash,
        }
        : undefined);
    let uiStatus = "unknown";
    switch (swapStatus.data?.status) {
        case "COMPLETED":
            uiStatus = "completed";
            break;
        case "FAILED":
            uiStatus = "failed";
            break;
        case "PENDING":
        case "NOT_FOUND":
            uiStatus = "pending";
            break;
        case "NONE":
            uiStatus = "unknown";
            break;
        default:
            uiStatus = "unknown";
            break;
    }
    const purchaseCbCalled = (0, react_1.useRef)(false);
    (0, react_1.useEffect)(() => {
        if (purchaseCbCalled.current || !props.onSuccess) {
            return;
        }
        if (swapStatus.data?.status === "COMPLETED") {
            purchaseCbCalled.current = true;
            props.onSuccess(swapStatus.data);
        }
    }, [props.onSuccess, swapStatus]);
    const queryClient = (0, react_query_1.useQueryClient)();
    const balanceInvalidated = (0, react_1.useRef)(false);
    (0, react_1.useEffect)(() => {
        if (uiStatus === "completed" && !balanceInvalidated.current) {
            balanceInvalidated.current = true;
            (0, invalidateWalletBalance_js_1.invalidateWalletBalance)(queryClient);
        }
    }, [queryClient, uiStatus]);
    return { uiStatus };
}
function useSwapMutation(props) {
    const queryClient = (0, react_query_1.useQueryClient)();
    return (0, react_query_1.useMutation)({
        mutationFn: async (input) => {
            const { fromToken, toToken, amount } = input;
            const wallet = props.payer.wallet;
            // in case the wallet is not on the same chain as the fromToken, switch to it
            if (wallet.getChain()?.id !== fromToken.chainId) {
                await wallet.switchChain((0, utils_js_1.getCachedChain)(fromToken.chainId));
            }
            const account = wallet.getAccount();
            if (!account) {
                throw new Error("Payer wallet has no account");
            }
            // always get a fresh quote before executing
            const quote = await (0, getQuote_js_1.getBuyWithCryptoQuote)({
                client: props.client,
                fromAddress: account.address,
                fromChainId: fromToken.chainId,
                fromTokenAddress: fromToken.tokenAddress,
                paymentLinkId: props.paymentLinkId,
                toAddress: account.address,
                toAmount: amount,
                toChainId: toToken.chainId,
                toTokenAddress: toToken.tokenAddress,
            });
            const canBatch = account.sendBatchTransaction;
            const tokenContract = (0, contract_js_1.getContract)({
                address: quote.swapDetails.fromToken.tokenAddress,
                chain: (0, utils_js_1.getCachedChain)(quote.swapDetails.fromToken.chainId),
                client: props.client,
            });
            const approveTxRequired = quote.approvalData &&
                (await (0, allowance_js_1.allowance)({
                    contract: tokenContract,
                    owner: account.address,
                    spender: quote.approvalData.spenderAddress,
                })) < BigInt(quote.approvalData.amountWei);
            if (approveTxRequired && quote.approvalData && !canBatch) {
                (0, pay_js_1.trackPayEvent)({
                    amountWei: quote.swapDetails.fromAmountWei,
                    chainId: quote.swapDetails.fromToken.chainId,
                    client: props.client,
                    event: "prompt_swap_approval",
                    fromToken: quote.swapDetails.fromToken.tokenAddress,
                    toChainId: quote.swapDetails.toToken.chainId,
                    toToken: quote.swapDetails.toToken.tokenAddress,
                    walletAddress: account.address,
                    walletType: props.payer.wallet.id,
                });
                const transaction = (0, approve_js_1.approve)({
                    amountWei: BigInt(quote.approvalData.amountWei),
                    contract: tokenContract,
                    spender: quote.approvalData.spenderAddress,
                });
                const tx = await (0, send_transaction_js_1.sendTransaction)({
                    account,
                    transaction,
                });
                await (0, wait_for_tx_receipt_js_1.waitForReceipt)({ ...tx, maxBlocksWaitTime: 50 });
                (0, pay_js_1.trackPayEvent)({
                    amountWei: quote.swapDetails.fromAmountWei,
                    chainId: quote.swapDetails.fromToken.chainId,
                    client: props.client,
                    event: "swap_approval_success",
                    fromToken: quote.swapDetails.fromToken.tokenAddress,
                    toChainId: quote.swapDetails.toToken.chainId,
                    toToken: quote.swapDetails.toToken.tokenAddress,
                    walletAddress: account.address,
                    walletType: props.payer.wallet.id,
                });
            }
            (0, pay_js_1.trackPayEvent)({
                amountWei: quote.swapDetails.fromAmountWei,
                chainId: quote.swapDetails.fromToken.chainId,
                client: props.client,
                event: "prompt_swap_execution",
                fromToken: quote.swapDetails.fromToken.tokenAddress,
                toChainId: quote.swapDetails.toToken.chainId,
                toToken: quote.swapDetails.toToken.tokenAddress,
                walletAddress: account.address,
                walletType: props.payer.wallet.id,
            });
            const tx = quote.transactionRequest;
            let _swapTx;
            // check if we can batch approval and swap
            if (canBatch && quote.approvalData && approveTxRequired) {
                const approveTx = (0, approve_js_1.approve)({
                    amountWei: BigInt(quote.approvalData.amountWei),
                    contract: tokenContract,
                    spender: quote.approvalData.spenderAddress,
                });
                _swapTx = await (0, send_batch_transaction_js_1.sendBatchTransaction)({
                    account,
                    transactions: [approveTx, tx],
                });
            }
            else {
                _swapTx = await (0, send_transaction_js_1.sendTransaction)({
                    account,
                    transaction: tx,
                });
            }
            await (0, wait_for_tx_receipt_js_1.waitForReceipt)({ ..._swapTx, maxBlocksWaitTime: 50 });
            (0, pay_js_1.trackPayEvent)({
                amountWei: quote.swapDetails.fromAmountWei,
                chainId: quote.swapDetails.fromToken.chainId,
                client: props.client,
                event: "swap_execution_success",
                fromToken: quote.swapDetails.fromToken.tokenAddress,
                toChainId: quote.swapDetails.toToken.chainId,
                toToken: quote.swapDetails.toToken.tokenAddress,
                walletAddress: account.address,
                walletType: props.payer.wallet.id,
            });
            // do not add pending tx if the swap is part of fiat flow
            if (!props.isFiatFlow) {
                (0, pendingSwapTx_js_1.addPendingTx)({
                    chainId: _swapTx.chain.id,
                    txHash: _swapTx.transactionHash,
                    type: "swap",
                });
            }
            return {
                chainId: _swapTx.chain.id,
                transactionHash: _swapTx.transactionHash,
            };
        },
        onSuccess: () => {
            (0, invalidateWalletBalance_js_1.invalidateWalletBalance)(queryClient);
        },
    });
}
//# sourceMappingURL=OnRampScreen.js.map