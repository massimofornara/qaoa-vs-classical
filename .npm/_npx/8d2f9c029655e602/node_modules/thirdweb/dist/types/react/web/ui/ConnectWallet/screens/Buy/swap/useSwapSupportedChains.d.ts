import type { Chain } from "../../../../../../../chains/types.js";
import type { ThirdwebClient } from "../../../../../../../client/client.js";
import type { Address } from "../../../../../../../utils/address.js";
export type SupportedChainAndTokens = Array<{
    chain: Chain;
    tokens: Array<{
        address: string;
        buyWithCryptoEnabled: boolean;
        buyWithFiatEnabled: boolean;
        name: string;
        symbol: string;
        icon?: string;
    }>;
}>;
/**
 * @internal
 */
export declare function useBuySupportedDestinations(client: ThirdwebClient, _isTestMode?: boolean): import("@tanstack/react-query").UseQueryResult<SupportedChainAndTokens, Error>;
export declare function useBuySupportedSources(options: {
    client: ThirdwebClient;
    destinationChainId: number;
    destinationTokenAddress: string;
}): import("@tanstack/react-query").UseQueryResult<{
    chain: Readonly<import("../../../../../../../chains/types.js").ChainOptions & {
        rpc: string;
    }> | {
        readonly id: number;
        readonly rpc: `https://${number}.${string}`;
    };
    tokens: {
        address: Address;
        buyWithCryptoEnabled: boolean;
        buyWithFiatEnabled: boolean;
        name: string;
        symbol: string;
        icon?: string;
    }[];
}[], Error>;
//# sourceMappingURL=useSwapSupportedChains.d.ts.map